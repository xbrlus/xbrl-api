openapi: 3.0.0
# XBRL API
info:
  version: "V1"
  title: XBRL API 
  description: |
    #### [Skip to interactive documentation for objects](#/oauth2) || [Additional context and background on XBRL API (PDF)](XBRL-API-V1.5.pdf)
    
    ## Introduction
    The XBRL API can work with any database that conforms to the [XBRL 2.1 Specification](https://specifications.xbrl.org/work-product-index-group-base-spec-base-spec.html). The xbrlapi.yaml file noted above defines the free XBRL API used to retrieve data from the [XBRL US Database of Public filings](https://xbrl.us/filings-database).

    The documentation below describes how to use the XBRL API. The purpose of the XBRL API is to provide a unified interface to stored XBRL data which any data utility can adopt. This unified interface allows developers with limited XBRL knowledge to learn a single interface to access many data repositories. This expands access to the market for available data, while also encouraging the use of fundamental structured data.

    _To use this page interactively_, [generate a client ID and secret](https://xbrl.us/access-token) with your XBRL US Web account, then scroll down and click the **Authorize** button on the right-side of this page, or any of the lock icons. Enter the required details, change the "Client credentials location" to **Request body**, then click "Authorize" and "Close". Once authorized, click any **Try it out** button appearing at the top of any object's Parameters list to form a query and get results.  

    ### Structure and Syntax
    The API is structured to allow the return of XBRL details as objects, which are used to classify XBRL data. These objects generally fall into two categories: **facts and data taxonomy**. Each object has multiple properties that can be used to define the query. Some are shared and others are unique to the object. **Objects can also be nested** allowing specific information about the main object to be retrieved.

    Each object has properties that can be accessed by requesting them from the XBRL API. The property of the object is defined using a dot notation (ie. `object.property`). For example, to return the __value__ of the fact, use `fact.value`. While many of these properties can also be used to search for data, **not all properties of the object are searchable** and some properties may be defined as components of other objects and are inherited from these objects.

    #### Object Search
    The `search` keyword is used as an endpoint in many URIs. This indicates to the API that you will be searching on one or more properties of the object. A search can be performed on one object at a time, and is based on the first object that appears in the URI. 
    
    For example, in the following uri, `entity.cik` is the search property with the report object:

    `/api/v1/report/search?entity.cik=0001493040&fields=report.*`

    Multiple parameters can be included in a search and are separated by ampersands (&). In the case below, the API will return `fact.value` data for a given CIK for Assets for 2017 in the first quarter:

    `/api/v1/fact/search?concept.local-name=Assets&period.fiscal-year=2017&period.fiscal.period=1Q&Entity.cik=0000001&fields=fact.value`

    It is not possible to search on a property that is not a component of the object. In the example above, the endpoint is referencing the fact object (fact appears after v1) so a user must search on a valid fact property.
    
    **Nested objects** allow you to pull sub-object information from the main object. Sub-objects that can be used are dependent on the main object. For example, facts can be returned for specific reports, and relationships can be returned for specific networks.

    In addition to accessing data through a specific object, **returned data can be managed by defining the properties of the data to be returned** and attributes of the properties:
    -  what details about the data should be returned - `fields`; 
    -  how many records should be returned - `limit`;
    -  what order should the records be returned in - `sort`, and; 
    -  from what starting position within the sequence of records should the data be returned - `offset`.

    #### Fields
    The `fields` query parameter establishes the details of the data to return for the specific query. Each field requested is separated using a comma without white space. The order of the fields returned is based on the position in the fields string.  Using the * as a wildcard on the object in the fields to return (ie. fact.*) will return all available properties of the object, and should only be used for testing, as it can slow a query considerably.

    #### Limit 
    A `limit` restricts the number of results returned by the query. **The limit attribute can only be added to an object type and not a property.** For example, to limit the number of reports in a query, the limit property is added to the fields to return as follows: `report.limit(10)`.

    #### Sort 
    Any returned value can be sorted in ascending or descending order, by adding an additional attribute (ASC or DESC) to a field value (ie. `report.document-type.sort(DESC)`). **Multiple sort criteria can be defined** and the sort sequence is determined by the order defined in the fields parameter. 

    #### Offset
    The 'offset' attribute enables targeting a return to a specific starting point in a query return sequence (ie. `report.offset(120)`).  To work reliably, __at least one__ sorted property should be included in the returned fields.
      
    In the following example, the 10 reports returned starting with the 120th report for the search query would be sorted alpha-numerically in descending order first by document type and then by timestamp:

    `fields=report.limit(10),report.document-type.sort(DESC),report.accepted-timestamp.sort(DESC),report.offset(120)`

    ### Authorization Flow

    We use [OAuth2 JWT](https://jwt.io/) flows to secure interactions. Below are **CURL** examples for typical **XBRL API** flows to request, return and use a token, which is required to process queries. The XBRL API is sessionless, so each "session" always begins with the [OAuth2 JWT Access Token Flow](https://jwt.io/introduction).

    #### Access Token Flow

    This flow shows the steps required to interact with the API

    1. Send an HTTP `POST` request to the tokenUrl: `/oauth2/token`:
      ```http
      POST /oauth2/token HTTP/1.1 
      Host: <api.xbrl.us> 
      Content-Type: application/x-www-form-urlencoded 
      Body: {
        "grant_type": password,
        "client_id": "XBRL US Client",
        "client_secret": "client secret",
        "username": "username",
        "password": "password",
        "platform": pc
      }
      ```
    2. Upon a successful authorization grant, the server will respond with an `access_token`:
      ```http
      HTTP/1.1 200 OK
      Request URL: <example.com>/oauth2/token
      Date: <EEE, dd MMM yyyy HH:mm:ss z>
      Content-Length: 500
      Body: {
        "platform": "pc",
        "access_token": "eyJ...124nOvc",
        "refresh_token": "eyJ...124nOvc",
        "expires_in" : 3600,
        "refresh_token_expires_in": 10800,
        "token_type": "bearer"
      }
      ```
    3. Add a new `Authorization` header with type `Bearer` and the contents of the above `access_token`
      ```http
      GET </some/route> HTTP/1.1
      Host: <api.xbrl.us> 
      Authorization: Bearer yJ...124nOvc
      Content-Type: application/json; charset=utf-8 
      Body: <...>
      ```    
    **Once an access_token has been acquired, it can be used on all queries with an account until it returns a 401.** If this occurs, simply request a new token using existing `client_id`, `client_secret`, `refresh_token` and `platform` values, and set `grant_type` to **refresh_token**. 
  contact:
    name: XBRL US
    email: support@xbrl.us
servers:
  - description: Running this application XBRL US server
    url: 'https://api.xbrl.us/'
tags:
  - name: oauth2
    description: " -- acquire authorization, receive tokens, and check tokens"
  - name: fact
    description: " -- return XBRL facts and metadata contained in a report"
  - name: report
    description: " -- get details about XBRL reports"
  - name: entity
    description: " -- get details about entities making XBRL filings"
  - name: assertion
    description: " -- return error information about XBRL facts and reports in filings"
  - name: dts
    description: " -- get details information about the discoverable taxonomy set (taxonomy)"
  - name: concept
    description: " -- get information about XBRL concepts in a taxonomy"
  - name: label
    description: " -- return metadata associated with a concept and a DTS identifier"
  - name: network
    description: " -- return network information about concepts and/or relationships in a dts"
  - name: relationship
    description: " -- get relationship information associated with a network and/or DTS identifier"
  - name: cube
    description: " -- get information about a hypercube and the data in a hypercube"
  - name: dimension
    description: " -- get information about a hypercubes dimensions and members"
  - name: document
    description: " -- request document information associated with a DTS or report (available to XBRL US Members only)"
    
security:
  - oauth2: [ROLE_CLIENT, ROLE_USER]
paths:
  /oauth2/token:
    summary: Aquire an access token by fulfilling a client_credentials grant, or a password grant.
    post:
      operationId: tokenUrl
      tags: [oauth2]
      security: []
      description: >
        Assuming a valid login exists, this route allows a trusted client to aquire an access token for itself, or to request an access token for a specific user. **You may send both `client_credentials` grants and `password` grants via the following**: 
         * **application/x-www-form-urlencoded**


        **[Read more](https://oauth.net/2/grant-types/)**
      requestBody:
        content:
          # application/json:
          #   schema:
          #     $ref: '#/components/schemas/authorization_grant'
          #   example:
          #     grant_type: password
          #     client_id: 1223
          #     client_secret: xhOEnAX2M...gaIYLXOvCe25Q
          #     username: Your_XBRL_US_Web_Account_email@domain.com
          #     password: someSecurePassword
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/authorization_grant'
          # multipart/form-data:
          #   schema:
          #     $ref: '#/components/schemas/authorization_grant'
      responses:
        '200':
          description: > 
            The authorization grant has been validated, and an access token is granted. **[Read more](https://jwt.io/introduction/)**
          content:
            application/json:
              schema:
                type: object
                properties:
                  platform :
                    type: string
                    example: pc
                  access_token:
                    type: string
                    format: byte
                    example: eyJ...124nOvc
                    description: A JWT access token. **[Read more](https://jwt.io/)**
                  refresh_token:
                    type: string
                    format: byte
                    example: eyJ...124nOvc
                    description: A JWT access token. **[Read more](https://jwt.io/)**
                  expires_in:
                    type: integer
                    example: 3600
                  refresh_token_expires_in:
                    type: integer
                    example: 3600
                  token_type:
                    type: string
                    example: bearer
                    description: >
                      _The token_type will always be bearer._ The access_token is considered a bearer token, and thus should be placed in all subsequent requests to the resource endpoints by using the following header:
                        * Authorization: Bearer [token]
          # -----------------------------------------------------
          # Links
          # -----------------------------------------------------
          links:
            bearerAuth:   # <---- arbitrary name for the link
              operationId: tokenUrl
              parameters:
                bearerAuth: '$response.body#access_token'
              description: >
                The `access_token` value returned in the response can be used as
                the `bearer token`.
          # -----------------------------------------------------

        '400':
          $ref: '#/components/responses/bad_request'
        '401':
          $ref: '#/components/responses/unauthorized'
        '405':
          $ref: '#/components/responses/method_not_allowed'
        '500':
          $ref: '#/components/responses/internal_server_error'
  /api/v1/fact/search:
    summary: Request facts from XBRL filings based on search parameters.
    get:
      operationId: getFactDetails
      tags: [fact]
      security:
        - OAuth2: []
        - bearerAuth: []
      description: > 
          Search for _XBRL facts_ based on the attributes of the fact, the report it was in, or the source of the data.  
          
          ## Examples
          
          ### _-Get all the facts in a document_
          
          
          The following call will: get all facts in the report with an id of `226471`; limit the number of records returned to `1010` facts; sort facts `A-Z by the concept name`, and; return the following values:
            * entity.name
            * dimensions.count
            * dimensions
            * entity.cik
            * period.fiscal-period
            * period.end
            * period.instant
            * period.year
            * concept.local-name.sort(ASC)
            * fact.numerical-value,fact.limit(1010)
            * fact.value,report.source-id
            * footnote.text
            * footnote.role
          
                  https://api.xbrl.us/api/v1/fact/search?report.id=226471&fields=entity.name,dimensions.count,dimensions,entity.cik,period.fiscal-period,period.end,period.instant,period.year,concept.local-name.sort(ASC),fact.numerical-value,fact.limit(1010),fact.value,report.source-id,footnote.text,footnote.role
            
  
          ### _-Get Operating Cash used by Pharma for the 2017 year_
          
          The following call will get all facts reported for the 2017 year using the concept  `NetCashProvidedByUsedInOperatingActivities` reported for the sic code  `3841` which have no dimensions. It also limits the records returned to `100` facts and will return the following values:
            
            * fact.numerical-value
            * period.fiscal-year
            * period.fiscal-period
            
                  https://api.xbrl.us/api/v1/fact/search?period.fiscal-period=Y&fact.ultimus=true&report.sic-code=3841&concept.local-name=NetCashProvidedByUsedInOperatingActivities&period.fiscal-year=2017&dimensions.count=0&fields=fact.numerical-value,period.fiscal-year,period.fiscal-period,fact.limit(100)
          
              
          
      parameters: 
        - $ref: '#/components/parameters/concept.id_Param' 
        - $ref: '#/components/parameters/concept.is-base_Param'
        - $ref: '#/components/parameters/concept.is-monetary_Param'
        - $ref: '#/components/parameters/concept.local-name_Param'
        - $ref: '#/components/parameters/concept.namespace_Param'
        - $ref: '#/components/parameters/dimension.is-base_Param'
        - $ref: '#/components/parameters/dimension.local-name_Param'
        - $ref: '#/components/parameters/dimension.namespace_Param'
        - $ref: '#/components/parameters/dimensions.count_Param'
        - $ref: '#/components/parameters/dimensions.id_Param'
        - $ref: '#/components/parameters/dts.entry-point_Param'
        - $ref: '#/components/parameters/dts.id_Param'
        - $ref: '#/components/parameters/dts.target-namespace_Param'
        - $ref: '#/components/parameters/entity.cik_Param'
        - $ref: '#/components/parameters/entity.id_Param'
        - $ref: '#/components/parameters/fact.has-dimensions_Param'
        - $ref: '#/components/parameters/fact.hash_Param'
        - $ref: '#/components/parameters/fact.id_Param'
        - $ref: '#/components/parameters/fact.is-extended_Param'
        - $ref: '#/components/parameters/fact.text-search_Param'
        - $ref: '#/components/parameters/fact.ultimus_Param'
        - $ref: '#/components/parameters/fact.ultimus-index_Param'
        - $ref: '#/components/parameters/fact.value_Param'
        - $ref: '#/components/parameters/fact.value-link_Param'
        - $ref: '#/components/parameters/member.is-base_Param'
        - $ref: '#/components/parameters/member.local-name_Param'
        - $ref: '#/components/parameters/member.typed-value_Param'
        - $ref: '#/components/parameters/member.member-value_Param'
        - $ref: '#/components/parameters/member.namespace_Param'
        - $ref: '#/components/parameters/period.calendar-period_Param'
        - $ref: '#/components/parameters/period.fiscal-id_Param'
        - $ref: '#/components/parameters/period.fiscal-period_Param'
        - $ref: '#/components/parameters/period.fiscal-year_Param'
        - $ref: '#/components/parameters/period.id_Param'
        - $ref: '#/components/parameters/period.year_Param'
        - $ref: '#/components/parameters/report.accession_Param'
        - $ref: '#/components/parameters/report.creation-software_Param'
        - $ref: '#/components/parameters/report.document-type_Param'
        - $ref: '#/components/parameters/report.entry-url_Param'
        - $ref: '#/components/parameters/report.id_Param'
        - $ref: '#/components/parameters/report.restated_Param'
        - $ref: '#/components/parameters/report.restated-index_Param'
        - $ref: '#/components/parameters/report.sec-url_Param'
        - $ref: '#/components/parameters/report.sic-code_Param'
        - $ref: '#/components/parameters/report.source-id_Param'
        - $ref: '#/components/parameters/report.source-name_Param'
        - $ref: '#/components/parameters/unit_Param'
        - in: query
          name: fields
          required: true
          style: form
          explode: false
          allowEmptyValue : false
          schema:
            $ref: '#/components/schemas/fact_fields'
          description: This is the list of fields that can be returned for _XBRL facts_.
          
        # - in: query
        #   name: aspect
        #   # Wrap 'schema' into 'content.<media-type>'
        #   content:
        #     application/json:  # <---- media type indicates how to serialize / deserialize the parameter content
        #       schema:
        #         type: object
        #         properties:
        #           dimension:
        #            type: string
        #           member:
        #            type: string
          
      responses:
        '200':
          description: __fact details__ successfully accepted
          content:
            application/json:
              schema:
                type: object
                properties:
                  paging:
                    $ref: '#/components/schemas/paging'
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/fact_details'
          # -----------------------------------------------------
          # Links
          # -----------------------------------------------------
          links:
            GetfactId:   # <---- arbitrary name for the link
              operationId: getFactBasedOnFactID
              parameters:
                fact.id: '$response.body#/data/fact.id'
              description: >
                The `fact.id` value returned in the response can be used as
                the `factId` parameter in `/api/v1/fact/{fact.id}`.
          # -----------------------------------------------------
        '201':
          $ref: '#/components/responses/invalid_request'
        '400':
          $ref: '#/components/responses/bad_request'
        '401':
          $ref: '#/components/responses/bad_token'
        '405':
          $ref: '#/components/responses/method_not_allowed'
        '500':
          $ref: '#/components/responses/internal_server_error'
          
  /api/v1/fact/{fact.id}:
    summary: Request fact detail from an XBRL filing based on its unique identifier. The fact ID is an internal ID used by the API.
    get:
      operationId: getFactBasedOnFactID
      tags: [fact]
      security:
        - OAuth2: []
        - bearerAuth: []
      description: >
       Search for _XBRL facts_ based on the fact.id attribute of the fact.
      parameters:
        - $ref: '#/components/parameters/fact.text-search_Param'
        - name: fact.id
          in: path
          description: ID of the fact defined by the API.
          required: true
          schema:
            type: integer
        - in: query
          name: fields
          required: true
          style: form
          explode: false
          schema:
            $ref: '#/components/schemas/fact_fields'
          description: This is the list of fields that can be returned for _XBRL facts_.  
      responses:
        '200':
          description: __fact details__ successfully accepted
          content:
            application/json:
              schema:
                type: object
                properties:
                  paging:
                    $ref: '#/components/schemas/paging'
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/fact_details'
        '201':
          $ref: '#/components/responses/invalid_request'
        '400':
          $ref: '#/components/responses/bad_request'
        '401':
          $ref: '#/components/responses/bad_token'
        '405':
          $ref: '#/components/responses/method_not_allowed'
        '500':
          $ref: '#/components/responses/internal_server_error'
  /api/v1/fact/oim/search:
    summary: Request facts from XBRL filings based on search parameters.
    get:
      operationId: getFactDetailsInOIMFormat
      tags: [fact]
      security:
        - bearerAuth: []
      description: >
        Returns _XBRL facts_ detail in the OIM JSON format.
      parameters: 
        - $ref: '#/components/parameters/concept.id_Param' 
        - $ref: '#/components/parameters/concept.is-base_Param'
        - $ref: '#/components/parameters/concept.is-monetary_Param'
        - $ref: '#/components/parameters/concept.local-name_Param'
        - $ref: '#/components/parameters/concept.namespace_Param'
        - $ref: '#/components/parameters/dimension.is-base_Param'
        - $ref: '#/components/parameters/dimension.local-name_Param'
        - $ref: '#/components/parameters/dimension.namespace_Param'
        - $ref: '#/components/parameters/dimensions.count_Param'
        - $ref: '#/components/parameters/dimensions.id_Param'
        - $ref: '#/components/parameters/dts.entry-point_Param'
        - $ref: '#/components/parameters/dts.id_Param'
        - $ref: '#/components/parameters/dts.target-namespace_Param'
        - $ref: '#/components/parameters/entity.cik_Param'
        - $ref: '#/components/parameters/entity.id_Param'
        - $ref: '#/components/parameters/fact.has-dimensions_Param'
        - $ref: '#/components/parameters/fact.hash_Param'
        - $ref: '#/components/parameters/fact.id_Param'
        - $ref: '#/components/parameters/fact.is-extended_Param'
        - $ref: '#/components/parameters/fact.ultimus_Param'
        - $ref: '#/components/parameters/fact.ultimus-index_Param'
        - $ref: '#/components/parameters/fact.value_Param'
        - $ref: '#/components/parameters/member.is-base_Param'
        - $ref: '#/components/parameters/member.local-name_Param'
        - $ref: '#/components/parameters/member.typed-value_Param'
        - $ref: '#/components/parameters/member.member-value_Param'
        - $ref: '#/components/parameters/member.namespace_Param'
        - $ref: '#/components/parameters/period.calendar-period_Param'
        - $ref: '#/components/parameters/period.fiscal-id_Param'
        - $ref: '#/components/parameters/period.fiscal-period_Param'
        - $ref: '#/components/parameters/period.fiscal-year_Param'
        - $ref: '#/components/parameters/period.id_Param'
        - $ref: '#/components/parameters/period.year_Param'
        - $ref: '#/components/parameters/report.accession_Param'
        - $ref: '#/components/parameters/report.creation-software_Param'
        - $ref: '#/components/parameters/report.entry-url_Param'
        - $ref: '#/components/parameters/report.id_Param'
        - $ref: '#/components/parameters/report.restated_Param'
        - $ref: '#/components/parameters/report.restated-index_Param'
        - $ref: '#/components/parameters/report.sec-url_Param'
        - $ref: '#/components/parameters/report.sic-code_Param'
        - $ref: '#/components/parameters/report.source-id_Param'
        - $ref: '#/components/parameters/report.source-name_Param'
        - $ref: '#/components/parameters/unit_Param'
        
      responses:
        '200':
          description: __fact details__ successfully accepted
          content:
            application/json:
              schema:
                type: object
                properties:
                  documentInfo:
                    $ref: '#/components/schemas/documentInfo_oim_json'
                  facts:
                      $ref: '#/components/schemas/facts_oim_json'
        '201':
          $ref: '#/components/responses/invalid_request'
        '400':
          $ref: '#/components/responses/bad_request'
        '401':
          $ref: '#/components/responses/bad_token'
        '405':
          $ref: '#/components/responses/method_not_allowed'
        '500':
          $ref: '#/components/responses/internal_server_error'
  /api/v1/report/search:
      summary: Request report details from XBRL filings based on search parameters.
      get:
        operationId: getReportDetails
        tags: [report]
        security:
          - OAuth2: []
          - bearerAuth: []
        description: >
          Return details for _XBRL reports_ based on the attributes of the report(s).
        parameters:
          - $ref: '#/components/parameters/dts.id_Param'
          - $ref: '#/components/parameters/entity.cik_Param'
          - $ref: '#/components/parameters/entity.id_Param' 
          - $ref: '#/components/parameters/entity.ticker_Param' 
          - $ref: '#/components/parameters/report.accession_Param' 
          - $ref: '#/components/parameters/report.document-type_Param'
          - $ref: '#/components/parameters/report.entity-name_Param'
          - $ref: '#/components/parameters/report.entry-type_Param'
          - $ref: '#/components/parameters/report.entry-url_Param'
          - $ref: '#/components/parameters/report.filer-category_Param'
          - $ref: '#/components/parameters/report.id_Param'
          - $ref: '#/components/parameters/report.is-most-current_Param'
          - $ref: '#/components/parameters/report.period-index_Param'
          - $ref: '#/components/parameters/report.restated_Param'
          - $ref: '#/components/parameters/report.restated-index_Param'
          - $ref: '#/components/parameters/report.sec-url_Param'
          - $ref: '#/components/parameters/report.sic-code_Param'
          - $ref: '#/components/parameters/report.source-id_Param'
          - $ref: '#/components/parameters/report.source-name_Param'
          - in: query
            name: fields
            required: true
            style: form
            explode: false
            allowEmptyValue : false
            schema:
              $ref: '#/components/schemas/report_fields'
            description: This is the list of fields that can be returned for _XBRL reports_.
          
          
        responses:
          '200':
            description: __report details__ successfully accepted
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    paging:
                      $ref: '#/components/schemas/paging'
                    data:
                      type: array
                      items:
                        $ref: '#/components/schemas/report_details'
          '201':
            $ref: '#/components/responses/invalid_request'
          '400':
            $ref: '#/components/responses/bad_request'
          '401':
            $ref: '#/components/responses/bad_token'
          '405':
            $ref: '#/components/responses/method_not_allowed'
          '500':
            $ref: '#/components/responses/internal_server_error'
  /api/v1/report/{report.id}:
      summary: Request a report from XBRL filings based on unique report identifier. The report ID is an internal ID used by the API.
      get:
        operationId: getReportDetailsById
        tags: [report]
        security:
          - OAuth2: []
          - bearerAuth: []
        description: >
          Return detail for an _XBRL report_ based on the report.id attribute.
        parameters:
          - name: report.id
            in: path
            description: ID of the report defined by the API.
            required: true
            schema:
              type: integer
          - in: query
            name: fields
            required: true
            style: form
            explode: false
            allowEmptyValue : false
            schema:
              $ref: '#/components/schemas/report_fields'
            description: This is the list of fields that can be returned for _XBRL reports_.
        responses:
          '200':
            description: __report details__ successfully accepted
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    paging:
                      $ref: '#/components/schemas/paging'
                    data:
                      type: array
                      items:
                        $ref: '#/components/schemas/report_details'
          '201':
            $ref: '#/components/responses/invalid_request'
          '400':
            $ref: '#/components/responses/bad_request'
          '401':
            $ref: '#/components/responses/bad_token'
          '405':
            $ref: '#/components/responses/method_not_allowed'
          '500':
            $ref: '#/components/responses/internal_server_error'
  
  /api/v1/report/{report.id}/fact/search:
    summary: Request facts from XBRL filings based on specified report.id and fact parameters.
    get:
      operationId: getReportFactDetailsById
      tags: [report]
      security:
        - bearerAuth: []
      description: >
        Allows searching for _XBRL reports_ based on the report.id and returns certain _XBRL facts_ associated with that report.  The attributes of those facts can be used as search parameters.
      parameters:
        - name: report.id
          in: path
          description: ID of the report defined by the API.
          required: true
          schema:
            type: integer
        - $ref: '#/components/parameters/concept.id_Param' 
        - $ref: '#/components/parameters/concept.is-base_Param'
        - $ref: '#/components/parameters/concept.is-monetary_Param'
        - $ref: '#/components/parameters/concept.local-name_Param'
        - $ref: '#/components/parameters/concept.namespace_Param'
        - $ref: '#/components/parameters/dimension.is-base_Param'
        - $ref: '#/components/parameters/dimension.local-name_Param'
        - $ref: '#/components/parameters/dimension.namespace_Param'
        - $ref: '#/components/parameters/dimensions.count_Param'
        - $ref: '#/components/parameters/dimensions.id_Param'
        - $ref: '#/components/parameters/dts.entry-point_Param'
        - $ref: '#/components/parameters/dts.id_Param'
        - $ref: '#/components/parameters/dts.target-namespace_Param'
        - $ref: '#/components/parameters/entity.cik_Param'
        - $ref: '#/components/parameters/entity.id_Param'
        - $ref: '#/components/parameters/fact.has-dimensions_Param'
        - $ref: '#/components/parameters/fact.hash_Param'
        - $ref: '#/components/parameters/fact.id_Param'
        - $ref: '#/components/parameters/fact.is-extended_Param'
        - $ref: '#/components/parameters/fact.text-search_Param'
        - $ref: '#/components/parameters/fact.ultimus_Param'
        - $ref: '#/components/parameters/fact.ultimus-index_Param'
        - $ref: '#/components/parameters/fact.value_Param'
        - $ref: '#/components/parameters/fact.value-link_Param'
        - $ref: '#/components/parameters/member.is-base_Param'
        - $ref: '#/components/parameters/member.local-name_Param'
        - $ref: '#/components/parameters/member.typed-value_Param'
        - $ref: '#/components/parameters/member.member-value_Param'
        - $ref: '#/components/parameters/member.namespace_Param'
        - $ref: '#/components/parameters/period.calendar-period_Param'
        - $ref: '#/components/parameters/period.fiscal-id_Param'
        - $ref: '#/components/parameters/period.fiscal-period_Param'
        - $ref: '#/components/parameters/period.fiscal-year_Param'
        - $ref: '#/components/parameters/period.id_Param'
        - $ref: '#/components/parameters/period.year_Param'
        - $ref: '#/components/parameters/report.accession_Param'
        - $ref: '#/components/parameters/report.creation-software_Param'
        - $ref: '#/components/parameters/report.entry-url_Param'
        - $ref: '#/components/parameters/report.id_Param'
        - $ref: '#/components/parameters/report.restated_Param'
        - $ref: '#/components/parameters/report.restated-index_Param'
        - $ref: '#/components/parameters/report.sec-url_Param'
        - $ref: '#/components/parameters/report.sic-code_Param'
        - $ref: '#/components/parameters/report.source-id_Param'
        - $ref: '#/components/parameters/report.source-name_Param'
        - $ref: '#/components/parameters/unit_Param'
        - in: query
          name: fields
          required: true
          style: form
          explode: false
          allowEmptyValue : false
          schema:
            $ref: '#/components/schemas/report_and_fact_fields'
            
          description: Report *and* fact fields can be returned by a nested report/fact query.
      responses:
        '200':
          description: __report details__ successfully accepted
          content:
            application/json:
              schema:
                type: object
                properties:
                  paging:
                    $ref: '#/components/schemas/paging'
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/report_details_with_facts'
        '201':
          $ref: '#/components/responses/invalid_request'
        '400':
          $ref: '#/components/responses/bad_request'
        '401':
          $ref: '#/components/responses/bad_token'
        '405':
          $ref: '#/components/responses/method_not_allowed'
        '500':
          $ref: '#/components/responses/internal_server_error'
  /api/v1/report/fact/search:
    summary: Request reports and facts from XBRL filings based on report and fact parameters.
    get:
      operationId: getReportFactDetailsBySearch
      tags: [report]
      security:
        - OAuth2: []
        - bearerAuth: []
      description: >
        Allows searching for _XBRL reports_ based on valid report search parameters and returns certain _XBRL facts_ associated with qualified reports.  The attributes of those facts can be used as search parameters.
      parameters:
        - $ref: '#/components/parameters/concept.id_Param' 
        - $ref: '#/components/parameters/concept.is-base_Param'
        - $ref: '#/components/parameters/concept.is-monetary_Param'
        - $ref: '#/components/parameters/concept.local-name_Param'
        - $ref: '#/components/parameters/concept.namespace_Param'
        - $ref: '#/components/parameters/dimension.is-base_Param'
        - $ref: '#/components/parameters/dimension.local-name_Param'
        - $ref: '#/components/parameters/dimension.namespace_Param'
        - $ref: '#/components/parameters/dimensions.id_Param'
        - $ref: '#/components/parameters/dts.entry-point_Param'
        - $ref: '#/components/parameters/dts.id_Param'
        - $ref: '#/components/parameters/dts.target-namespace_Param'
        - $ref: '#/components/parameters/entity.cik_Param'
        - $ref: '#/components/parameters/entity.id_Param'
        - $ref: '#/components/parameters/entity.ticker_Param'
        - $ref: '#/components/parameters/fact.has-dimensions_Param'
        - $ref: '#/components/parameters/fact.hash_Param'
        - $ref: '#/components/parameters/fact.id_Param'
        - $ref: '#/components/parameters/fact.is-extended_Param'
        - $ref: '#/components/parameters/fact.text-search_Param'
        - $ref: '#/components/parameters/fact.ultimus-index_Param'
        - $ref: '#/components/parameters/fact.ultimus_Param'
        - $ref: '#/components/parameters/fact.value_Param'
        - $ref: '#/components/parameters/fact.value-link_Param'
        - $ref: '#/components/parameters/member.is-base_Param'
        - $ref: '#/components/parameters/member.local-name_Param'
        - $ref: '#/components/parameters/member.typed-value_Param'
        - $ref: '#/components/parameters/member.member-value_Param'
        - $ref: '#/components/parameters/member.namespace_Param'
        - $ref: '#/components/parameters/period.calendar-period_Param'
        - $ref: '#/components/parameters/period.fiscal-id_Param'
        - $ref: '#/components/parameters/period.fiscal-period_Param'
        - $ref: '#/components/parameters/period.fiscal-year_Param'
        - $ref: '#/components/parameters/period.id_Param'
        - $ref: '#/components/parameters/period.year_Param'
        - $ref: '#/components/parameters/report.accession_Param'
        - $ref: '#/components/parameters/report.creation-software_Param'
        - $ref: '#/components/parameters/report.document-type_Param'
        - $ref: '#/components/parameters/report.entity-name_Param'
        - $ref: '#/components/parameters/report.entry-type_Param'
        - $ref: '#/components/parameters/report.entry-url_Param'
        - $ref: '#/components/parameters/report.filer-category_Param'
        - $ref: '#/components/parameters/report.id_Param'
        - $ref: '#/components/parameters/report.is-most-current_Param'
        - $ref: '#/components/parameters/report.period-index_Param'
        - $ref: '#/components/parameters/report.restated-index_Param'
        - $ref: '#/components/parameters/report.restated_Param'
        - $ref: '#/components/parameters/report.sec-url_Param'
        - $ref: '#/components/parameters/report.sic-code_Param'
        - $ref: '#/components/parameters/report.source-id_Param'
        - $ref: '#/components/parameters/report.source-name_Param'
        - $ref: '#/components/parameters/unit_Param'
        - in: query
          name: fields
          required: true
          style: form
          explode: false
          allowEmptyValue : false
          schema:
            $ref: '#/components/schemas/report_details_with_facts'
            
          description: Report *and* fact fields can be returned by a nested report/fact query.
      responses:
        '200':
          description: __report details__ successfully accepted
          content:
            application/json:
              schema:
                type: object
                properties:
                  paging:
                    $ref: '#/components/schemas/paging'
                  data:
                    type: array
                    items:
                       $ref: '#/components/schemas/report_details_with_facts'
        '201':
          $ref: '#/components/responses/invalid_request'
        '400':
          $ref: '#/components/responses/bad_request'
        '401':
          $ref: '#/components/responses/bad_token'
        '405':
          $ref: '#/components/responses/method_not_allowed'
        '500':
          $ref: '#/components/responses/internal_server_error'
  /api/v1/report/{report.id}/delete: 
      delete:
        operationId: deleteReportDetailsById
        tags: [report]
        security:
          - OAuth2: []
          - bearerAuth: []
        description: >
          Deletes an _XBRL report_.
        parameters:
          - name: report.id
            in: path
            description: ID of the report defined by the API.
            required: true
            schema:
              type: integer

        responses:
          '200':
            description: __report details__ successfully deleted
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    paging:
                      $ref: '#/components/schemas/paging'
                    data:
                      type: array
                      items:
                        $ref: '#/components/schemas/report_details'
          '201':
            $ref: '#/components/responses/invalid_request'
          '400':
            $ref: '#/components/responses/bad_request'
          '401':
            $ref: '#/components/responses/bad_token'
          '405':
            $ref: '#/components/responses/method_not_allowed'
          '500':
            $ref: '#/components/responses/internal_server_error'        
  /api/v1/entity/{entity.id}/report/search:
      summary: Request report information based on the entity identifier. The entity ID is an internal ID used by the API.
      get:
        operationId: getEntityReportDetailsBasedOnID
        tags: [entity]
        security:
          - bearerAuth: []
        description: >
          Search for _XBRL reports_ based on the entity identifier associated with the reporting entity. Get entity and report information for the known entity. 
        parameters:
          - name: entity.id
            in: path
            description: ID of the entity defined by the API.
            required: true
            schema:
              type: integer

          - $ref: '#/components/parameters/report.source-id_Param'
          - $ref: '#/components/parameters/report.source-name_Param'
          - $ref: '#/components/parameters/report.accession_Param'
          - $ref: '#/components/parameters/report.id_Param'
          - $ref: '#/components/parameters/report.document-type_Param'
          - $ref: '#/components/parameters/report.entry-type_Param'
          - $ref: '#/components/parameters/report.entry-url_Param'
          - $ref: '#/components/parameters/report.filer-category_Param'
          - $ref: '#/components/parameters/report.is-most-current_Param'
          - $ref: '#/components/parameters/report.period-index_Param'
          - $ref: '#/components/parameters/report.restated_Param'
          - $ref: '#/components/parameters/report.restated-index_Param'
          - $ref: '#/components/parameters/report.sec-url_Param'
          - $ref: '#/components/parameters/report.sic-code_Param'
          
          - in: query
            name: fields
            required: true
            style: form
            explode: false
            allowEmptyValue : false
            schema:
              $ref: '#/components/schemas/entity_fields'
            description: Entity *and* report fields can be returned by a nested entity/report query.
          
          
        responses:
          '200':
            description: __entity report details__ successfully accepted
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    paging:
                      $ref: '#/components/schemas/paging'
                    data:
                      type: array
                      items:
                        $ref: '#/components/schemas/entity_details'
          '201':
            $ref: '#/components/responses/invalid_request'
          '400':
            $ref: '#/components/responses/bad_request'
          '401':
            $ref: '#/components/responses/bad_token'
          '405':
            $ref: '#/components/responses/method_not_allowed'
          '500':
            $ref: '#/components/responses/internal_server_error'
  
  /api/v1/entity/report/search:
      summary: Request entity *and* report details from XBRL filings based on search parameters.
      get:
        operationId: getEntityReportDetails
        tags: [entity]
        security:
          - OAuth2: []
          - bearerAuth: []
        description: >
          Search _XBRL reports_ grouped by the entity that filed the reports. The API allows searching on the attributes of the entity and the report.
        parameters:
          - $ref: '#/components/parameters/entity.cik_Param'
          - $ref: '#/components/parameters/entity.id_Param'
          - $ref: '#/components/parameters/report.entity-name_Param'
          - $ref: '#/components/parameters/entity.ticker_Param' 
          - $ref: '#/components/parameters/report.source-id_Param'
          - $ref: '#/components/parameters/report.source-name_Param'
          - $ref: '#/components/parameters/report.accession_Param'
          - $ref: '#/components/parameters/report.id_Param'
          - $ref: '#/components/parameters/report.document-type_Param'
          - $ref: '#/components/parameters/report.entry-type_Param'
          - $ref: '#/components/parameters/report.entry-url_Param'
          - $ref: '#/components/parameters/report.filer-category_Param'
          - $ref: '#/components/parameters/report.is-most-current_Param'
          - $ref: '#/components/parameters/report.period-index_Param'
          - $ref: '#/components/parameters/report.restated_Param'
          - $ref: '#/components/parameters/report.restated-index_Param'
          - $ref: '#/components/parameters/report.sec-url_Param'
          - $ref: '#/components/parameters/report.sic-code_Param'
         
          
          - in: query
            name: fields
            required: true
            style: form
            explode: false
            allowEmptyValue : false
            schema:
              $ref: '#/components/schemas/entity_fields'
            description: Entity *and* report fields can be returned by a nested entity/report query.
          
          
        responses:
          '200':
            description: __entity report details__ successfully accepted
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    paging:
                      $ref: '#/components/schemas/paging'
                    data:
                      type: array
                      items:
                        $ref: '#/components/schemas/entity_details'
          '201':
            $ref: '#/components/responses/invalid_request'
          '400':
            $ref: '#/components/responses/bad_request'
          '401':
            $ref: '#/components/responses/bad_token'
          '405':
            $ref: '#/components/responses/method_not_allowed'
          '500':
            $ref: '#/components/responses/internal_server_error'
            
  /api/v1/entity/{entity.id}:
      summary: Request entity information based on the entity identifier. The entity ID is an internal ID used by the API.
      get:
        operationId: getEntityDetailsBasedOnID
        tags: [entity]
        security:
          - OAuth2: []
          - bearerAuth: []
        description: >
          Allows searching for _XBRL entities_ based on the entity identifier associated with the reporting entity. Use this to get ticker or CIK information quickly with a known entity.id.
        parameters:
          - name: entity.id
            in: path
            description: ID of the entity defined by the API.
            required: true
            schema:
              type: integer
          
          - in: query
            name: fields
            required: true
            style: form
            explode: false
            allowEmptyValue : false
            schema:
              $ref: '#/components/schemas/entity_only_fields'
            description: This is the list of fields that can be returned for _XBRL entities_.
          
          
        responses:
          '200':
            description: __entity report details__ successfully accepted
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    paging:
                      $ref: '#/components/schemas/paging'
                    data:
                      type: array
                      items:
                        $ref: '#/components/schemas/entity_details'
          '201':
            $ref: '#/components/responses/invalid_request'
          '400':
            $ref: '#/components/responses/bad_request'
          '401':
            $ref: '#/components/responses/bad_token'
          '405':
            $ref: '#/components/responses/method_not_allowed'
          '500':
            $ref: '#/components/responses/internal_server_error'

  /api/v1/entity/search:
      summary: Request entity information based on searchable parameters like entity.name
      get:
        operationId: getEntityDetailsBasedOnSearch
        tags: [entity]
        security:
          - OAuth2: []
          - bearerAuth: []
        description: >
          Allows searching for _XBRL entities_ based on the entity search parameters associated with the reporting entity. Use this to get ticker or CIK information quickly with a known entity name or ticker.
        parameters:
          - $ref: '#/components/parameters/entity.cik_Param'
          - $ref: '#/components/parameters/entity.id_Param'
          - $ref: '#/components/parameters/entity.name_Param'
          - $ref: '#/components/parameters/entity.ticker_Param' 
          
          - in: query
            name: fields
            required: true
            style: form
            explode: false
            allowEmptyValue : false
            schema:
              $ref: '#/components/schemas/entity_only_fields'
            description: This is the list of fields that can be returned for _XBRL entities_.
          
          
        responses:
          '200':
            description: __entity report details__ successfully accepted
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    paging:
                      $ref: '#/components/schemas/paging'
                    data:
                      type: array
                      items:
                        type: object
                        properties:
                          entity.cik:
                            $ref: '#/components/schemas/entity_cik'
                          entity.id:
                            $ref: '#/components/schemas/entity_id'
                          entity.name:
                            $ref: '#/components/schemas/entity_name'
                          entity.scheme:
                            $ref: '#/components/schemas/entity_scheme'
                          entity.ticker:
                            $ref: '#/components/schemas/entity_ticker'
                          entity.ticker2:
                            $ref: '#/components/schemas/entity_ticker'
          '201':
            $ref: '#/components/responses/invalid_request'
          '400':
            $ref: '#/components/responses/bad_request'
          '401':
            $ref: '#/components/responses/bad_token'
          '405':
            $ref: '#/components/responses/method_not_allowed'
          '500':
            $ref: '#/components/responses/internal_server_error'

  /api/v1/assertion/search:
      summary: Request errors from XBRL filings based on search parameters.
      get:
        operationId: getAssertionDetails
        tags: [assertion]
        security:
          - OAuth2: []
          - bearerAuth: []
        description: >
          Search for errors in _XBRL reports_ based on validation frameworks used by regulators and Data Quality Committees. The API allows searching for errors by report, error code, sverity of the error, etc.
        parameters:
          - $ref: '#/components/parameters/assertion.code_Param' 
          - $ref: '#/components/parameters/assertion.severity_Param'
          - $ref: '#/components/parameters/assertion.source_Param'
          - $ref: '#/components/parameters/assertion.type_Param'
          - $ref: '#/components/parameters/entity.name_Param'
          - $ref: '#/components/parameters/report.accession_Param'
          - $ref: '#/components/parameters/report.creation-software_Param'
          - $ref: '#/components/parameters/report.document-type_Param'
          - $ref: '#/components/parameters/report.entry-url_Param'
          - $ref: '#/components/parameters/report.filing-year_Param'
          - $ref: '#/components/parameters/report.id_Param'
          - $ref: '#/components/parameters/report.sec-url_Param'
          - $ref: '#/components/parameters/report.sic-code_Param'
          
          - in: query
            name: fields
            required: true
            style: form
            explode: false
            allowEmptyValue : false
            schema:
              $ref: '#/components/schemas/assertion_fields'
            description: This is the list of fields that can be returned for _XBRL assertions_.
          
        responses:
          '200':
            description: __report details__ successfully accepted
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    paging:
                      $ref: '#/components/schemas/paging'
                    data:
                      type: array
                      items:
                        $ref: '#/components/schemas/assertion_details'
                        
          '201':
            $ref: '#/components/responses/invalid_request'
          '400':
            $ref: '#/components/responses/bad_request'
          '401':
            $ref: '#/components/responses/bad_token'
          '405':
            $ref: '#/components/responses/method_not_allowed'
          '500':
            $ref: '#/components/responses/internal_server_error'
            
  /api/v1/assertion/validate:
      summary: Request errors from XBRL filings based on search parameters.
      post:
        operationId: validateFiling
        tags: [assertion]
        security:
          - OAuth2: []
          - bearerAuth: []
        description:  Allows a user to submit a .zip file containing an XBRL instance and associated taxonomy files to the API.  The API returns validation errors based on the validation framework selected. The results can be returned as JSON or XML.
        requestBody:
          required: true
          content:
            multipart/form-data:
              schema:
                type: object
                properties:
                  file:
                    type: string
                    format: binary
                    description: Define the XBRL file in a .zip to be validated.  The file must be based on either the IFRS or US GAAP taxonomies.
                  Task:
                    type: string
                    enum: [checkfiling,dqcfiling]
                    description: This parameter allows the user to control which rules will be run. The option dqcfiling will run Data Quality Committee (DQC) rules. The checkfiling option will run the DQC rules and the [XBRL US SEC Filer Membership rules](https://xbrl.us/sec-filer) for qualified accounts.
                  format:
                    type: string
                    enum: [xml,json]
                    description: This parameter allows a user to specify if the results will be returned as JSON or XML.
                  efm:
                    type: string
                    enum: [strict,pragmatic]
                    description: This parameter controls if the EDGAR Filing Manual (EFM) rules will be run. This can be left balnk if no EFM rules are run, be defined as strict, or as pragmatic.
                  status:
                    type: string
                    default: approved
                    enum: [approved,proposed]
                    description: Used to specify either the current [Approved Data Quality Committee rules](https://xbrl.us/rules-guidance), or any [Proposed Rules  (inclusive of Approved Rules)](https://xbrl.us/public-review). The default value is approved if nothing is specified.
                  run_rules:
                    type: string
                    example: 'DQC.US.0001.54'
                    description: |
                      Used to run a single rule rather than an entire set of rules. For DQC rules, the full rule number is used if it is defined such as DQC.US.0001.54.  However some rules the suffix is determined at run time. This means certain rules such as DQC 15 which have the suffix defined as part of the rule must exclude the rule number suffix. To run DQC rule 15 the value of 'DQC.US.0015' is [assed as the parameter. The following rules will do not use a rule number suffix.
                      * DQC.US.0015
                      * DQC.IFRS.0080
                    
          
        responses:
          '200':
            description: __validation details__ successfully processed
            content:
              application/xml:
                schema:
                  $ref: '#/components/schemas/results'
              application/json:
                schema:
                  $ref: '#/components/schemas/results'
            
          '201':
            $ref: '#/components/responses/invalid_request'
          '400':
            $ref: '#/components/responses/bad_request'
          '401':
            $ref: '#/components/responses/bad_token'
          '405':
            $ref: '#/components/responses/method_not_allowed'
          '500':
            $ref: '#/components/responses/internal_server_error'
            
  /api/v1/dts/search:
      summary: Used to search discoverable taxonomy sets (dts) or taxonomies used in filings.  The DTS ID is an internal id used by the API that refers to the taxonomy schema of a filing.
      get:
        operationId: getDTSDetails
        tags: [dts]
        security:
          - OAuth2: []
          - bearerAuth: []
        description: >
          Search for a _XBRL discoverable taxonomy set (DTS)_ based on taxonomy name, entry point, hash, etc.
        parameters:
          - $ref: '#/components/parameters/dts.entry-point_Param' 
          - $ref: '#/components/parameters/dts.hash_Param'
          - $ref: '#/components/parameters/dts.id_Param'
          - $ref: '#/components/parameters/dts.taxonomy_Param'
          - $ref: '#/components/parameters/dts.taxonomy-name_Param'
          - $ref: '#/components/parameters/dts.version_Param'
          - $ref: '#/components/parameters/report.accession_Param'
          - $ref: '#/components/parameters/report.id_Param'
          - in: query
            name: fields
            required: true
            style: form
            explode: false
            allowEmptyValue : false
            schema:
                 $ref: '#/components/schemas/dts_fields' 
          
        responses:
          '200':
            description: __concept details__ successfully accepted
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    paging:
                      $ref: '#/components/schemas/paging'
                    data:
                      type: array
                      items:
                        $ref: '#/components/schemas/dts_details'
                        
          '201':
            $ref: '#/components/responses/invalid_request'
          '400':
            $ref: '#/components/responses/bad_request'
          '401':
            $ref: '#/components/responses/bad_token'
          '405':
            $ref: '#/components/responses/method_not_allowed'
          '500':
            $ref: '#/components/responses/internal_server_error'
  
  /api/v1/dts/{dts.id}/concept/search:
      summary: Request concept details from an XBRL filing for a specified dts.id.
      get:
        operationId: getConceptDetailsByDTS
        tags: [dts]
        security:
          - OAuth2: []
          - bearerAuth: []
        description: >
          Search for _XBRL concepts_ in a specific DTS.
        parameters:
          - name: dts.id
            in: path
            required: true
            schema:
              type: integer
            description: The DTS ID for a given group of taxonomies. XBRL facts and linkbases are typically associated with a given report that is asscociated with a dts.
            example: 321964
          - $ref: '#/components/parameters/concept.id_Param' 
          - $ref: '#/components/parameters/concept.local-name_Param'
          - $ref: '#/components/parameters/concept.namespace_Param'
          - $ref: '#/components/parameters/dts.entry-point_Param'
          - $ref: '#/components/parameters/dts.hash_Param'
          - $ref: '#/components/parameters/dts.target-namespace_Param'
          - in: query
            name: fields
            required: true
            style: form
            explode: false
            allowEmptyValue : false
            schema:
                 $ref: '#/components/schemas/concept_fields' 
          
        responses:
          '200':
            description: __concept details__ successfully accepted
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    paging:
                      $ref: '#/components/schemas/paging'
                    data:
                      type: array
                      items:
                        $ref: '#/components/schemas/concept_details'
                        
          '201':
            $ref: '#/components/responses/invalid_request'
          '400':
            $ref: '#/components/responses/bad_request'
          '401':
            $ref: '#/components/responses/bad_token'
          '405':
            $ref: '#/components/responses/method_not_allowed'
          '500':
            $ref: '#/components/responses/internal_server_error'
            
  /api/v1/dts/{dts.id}/concept/{concept.local-name}:
      summary: Request concepts from an XBRL filing based on specified dts.id and concept.local-name parameters.
      get:
        operationId: getConceptDetailsByDTSAndLocalName
        tags: [dts]
        security:
          - OAuth2: []
          - bearerAuth: []
        description: >
          Search for _XBRL concept_ details based on specific dts.id and concept.local-name parameters. The returned attributes of the DTS and concept can be used as search parameters.
        parameters:
          - name: dts.id
            in: path
            required: true
            schema:
              type: integer
            description: The DTS identifier for a given group of taxonomies. XBRL facts and linkbases are typically associated with a given report that is asscociated with a dts.
            example: 321964
          - name: concept.local-name
            in: path
            required: true
            schema:
              type: string
            description: The concept name in the base schema of a taxonomy exluding the namespace, such as Assets or Liabilities. Use this to search across multiple taxonomies where the local name is known to be consistent over time.
            example: Assets  
          - in: query
            name: fields
            required: true
            style: form
            explode: false
            allowEmptyValue : false
            schema:
                 $ref: '#/components/schemas/concept_fields' 
          
        responses:
          '200':
            description: __concept details__ successfully accepted
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    paging:
                      $ref: '#/components/schemas/paging'
                    data:
                      type: array
                      items:
                        $ref: '#/components/schemas/concept_details'
                        
          '201':
            $ref: '#/components/responses/invalid_request'
          '400':
            $ref: '#/components/responses/bad_request'
          '401':
            $ref: '#/components/responses/bad_token'
          '405':
            $ref: '#/components/responses/method_not_allowed'
          '500':
            $ref: '#/components/responses/internal_server_error'
                  
  /api/v1/dts/{dts.id}/concept/{concept.local-name}/label:
      summary: Request label details from an XBRL filing based on specified dts.id and concept.local-name parameters. The returned attributes of the DTS, concept and label can be used as search parameters.
      get:
        operationId: getLabelDetailsByDTSAndLocalName
        tags: [dts]
        security:
          - OAuth2: []
          - bearerAuth: []
        description: >
          Search for _XBRL label_ information for a given _XBRL concept_ in a specific DTS.
        parameters:
          - name: dts.id
            in: path
            required: true
            schema:
              type: integer
            description: The DTS identifier for a given group of taxonomies. XBRL facts and linkbases are typically associated with a given report that is asscociated with a dts.
            example: 321964
          - name: concept.local-name
            in: path
            required: true
            schema:
              type: string
            description: The concept name in the base schema of a taxonomy exluding the namespace, such as Assets or Liabilities. Use this to search across multiple taxonomies where the local name is known to be consistent over time.
            example: Assets  
          - in: query
            name: fields
            required: true
            style: form
            explode: false
            allowEmptyValue : false
            schema:
                 $ref: '#/components/schemas/label_fields' 
          
        responses:
          '200':
            description: __concept details__ successfully accepted
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    paging:
                      $ref: '#/components/schemas/paging'
                    data:
                      type: array
                      items:
                        $ref: '#/components/schemas/label_details_search'
                        
          '201':
            $ref: '#/components/responses/invalid_request'
          '400':
            $ref: '#/components/responses/bad_request'
          '401':
            $ref: '#/components/responses/bad_token'
          '405':
            $ref: '#/components/responses/method_not_allowed'
          '500':
            $ref: '#/components/responses/internal_server_error'          
  
  /api/v1/dts/{dts.id}/concept/{concept.local-name}/reference:
      summary: Request reference details from an XBRL filing based on specified dts.id and concept.local-name parameters. The returned attributes of the DTS, concept and reference can be used as search parameters.
      get:
        operationId: getReferenceDetailsByDTSAndLocalName
        tags: [dts]
        security:
          - OAuth2: []
          - bearerAuth: []
        description: >
          Search for _XBRL references_ of a given _XBRL concept_ for a specific DTS.
        parameters:
          - name: dts.id
            in: path
            required: true
            schema:
              type: integer
            description: The DTS identifier for a given group of taxonomies. XBRL facts and linkbases are typically associated with a given report that is asscociated with a dts.
            example: 321964
          - name: concept.local-name
            in: path
            required: true
            schema:
              type: string
            description: The concept name in the base schema of a taxonomy exluding the namespace, such as Assets or Liabilities. Use this to search across multiple taxonomies where the local name is known to be consistent over time.
            example: Assets  
          - in: query
            name: fields
            required: true
            style: form
            explode: false
            allowEmptyValue : false
            schema:
                 $ref: '#/components/schemas/reference_fields' 
          
        responses:
          '200':
            description: __concept details__ successfully accepted
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    paging:
                      $ref: '#/components/schemas/paging'
                    data:
                      type: array
                      items:
                        $ref: '#/components/schemas/reference_concept_details'
                        
          '201':
            $ref: '#/components/responses/invalid_request'
          '400':
            $ref: '#/components/responses/bad_request'
          '401':
            $ref: '#/components/responses/bad_token'
          '405':
            $ref: '#/components/responses/method_not_allowed'
          '500':
            $ref: '#/components/responses/internal_server_error'              
            
  /api/v1/dts/{dts.id}/network:
      summary: Request network details from XBRL filings based on a specified dts.id.
      get:
        operationId: getNetworkDetailsByDTS
        tags: [dts]
        security:
          - OAuth2: []
          - bearerAuth: []
        description: >
          Request _XBRL network_ and _XBRL relationship_ information for a specific DTS.
        parameters:
          - name: dts.id
            in: path
            required: true
            schema:
              type: integer
            description: The DTS identifier for a given group of taxonomies. XBRL facts and linkbases are typically associated with a given report that is asscociated with a dts.
            example: 321964
          
          - in: query
            name: fields
            required: true
            style: form
            explode: false
            allowEmptyValue : false
            schema:
                 $ref: '#/components/schemas/network_con_relationship_fields' 
          
        responses:
          '200':
            description: __concept details__ successfully accepted
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    paging:
                      $ref: '#/components/schemas/paging'
                    data:
                      type: array
                      items:
                        $ref: '#/components/schemas/network_details'
                        
          '201':
            $ref: '#/components/responses/invalid_request'
          '400':
            $ref: '#/components/responses/bad_request'
          '401':
            $ref: '#/components/responses/bad_token'
          '405':
            $ref: '#/components/responses/method_not_allowed'
          '500':
            $ref: '#/components/responses/internal_server_error'
            
  /api/v1/dts/{dts.id}/network/search:
      summary: Request network and relationship details from an XBRL filing based on specified dts.id and network parameters. The returned attributes of the DTS, network and relationship can be used as search parameters.
      get:
        operationId: getNetworkDetailsWithSearchByDTS
        tags: [dts]
        security:
          - OAuth2: []
          - bearerAuth: []
        description: >
          Search for _XBRL relationship_ details within the _XBRL networks_ of a specific DTS.
        parameters:
          - name: dts.id
            in: path
            required: true
            schema:
              type: integer
            description: The DTS identifier for a given group of taxonomies. XBRL facts and linkbases are typically associated with a given report that is asscociated with a dts.
            example: 321964
          - $ref: '#/components/parameters/network.id_Param' 
          - $ref: '#/components/parameters/network.role-uri_Param'
          - $ref: '#/components/parameters/network.arcrole-uri_Param'
          - $ref: '#/components/parameters/network.link-name_Param'
          - $ref: '#/components/parameters/relationship.id_Param'
          - $ref: '#/components/parameters/relationship.order_Param'
          - $ref: '#/components/parameters/relationship.preferred-label_Param'
          - $ref: '#/components/parameters/relationship.source-concept-id_Param'
          - $ref: '#/components/parameters/relationship.source-name_Param'
          - $ref: '#/components/parameters/relationship.source-namespace_Param'
          - $ref: '#/components/parameters/relationship.target-concept-id_Param'
          - $ref: '#/components/parameters/relationship.target-name_Param'
          - $ref: '#/components/parameters/relationship.target-namespace_Param'
          - $ref: '#/components/parameters/relationship.tree-depth_Param'
          - $ref: '#/components/parameters/relationship.tree-sequence_Param'
          
          - in: query
            name: fields
            required: true
            style: form
            explode: false
            allowEmptyValue : false
            schema:
                 $ref: '#/components/schemas/network_con_relationship_fields' 
          
        responses:
          '200':
            description: __concept details__ successfully accepted
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    paging:
                      $ref: '#/components/schemas/paging'
                    data:
                      type: array
                      items:
                        $ref: '#/components/schemas/network_details'
                        
          '201':
            $ref: '#/components/responses/invalid_request'
          '400':
            $ref: '#/components/responses/bad_request'
          '401':
            $ref: '#/components/responses/bad_token'
          '405':
            $ref: '#/components/responses/method_not_allowed'
          '500':
            $ref: '#/components/responses/internal_server_error'
  
  /api/v1/concept/search:
      summary: Request concept details based on specified parameters.
      get:
        operationId: getConceptDetails
        tags: [concept]
        security:
          - OAuth2: []
          - bearerAuth: []
        description: >
          Search for _XBRL concept_ details for a given DTS, or across a set of taxonomies. If searching for concept details it highly recomended that a DTS identifier is used to limit the concept search, *especially when returning label data*. For example, if _no DTS is presribed_ and the details of Assets are requested, the API will attempt to return _all the labels used for Assets in every single filing made_.
        parameters:
          - $ref: '#/components/parameters/concept.id_Param' 
          - $ref: '#/components/parameters/concept.local-name_Param'
          - $ref: '#/components/parameters/concept.namespace_Param'
          - $ref: '#/components/parameters/dts.entry-point_Param'
          - $ref: '#/components/parameters/dts.hash_Param'
          - $ref: '#/components/parameters/dts.id_Param'
          - $ref: '#/components/parameters/dts.target-namespace_Param'
          - in: query
            name: fields
            required: true
            style: form
            explode: false
            allowEmptyValue : false
            schema:
                 $ref: '#/components/schemas/concept_fields' 
          
        responses:
          '200':
            description: __concept details__ successfully accepted
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    paging:
                      $ref: '#/components/schemas/paging'
                    data:
                      type: array
                      items:
                        $ref: '#/components/schemas/concept_details'
                        
          '201':
            $ref: '#/components/responses/invalid_request'
          '400':
            $ref: '#/components/responses/bad_request'
          '401':
            $ref: '#/components/responses/bad_token'
          '405':
            $ref: '#/components/responses/method_not_allowed'
          '500':
            $ref: '#/components/responses/internal_server_error'
            
  /api/v1/concept/{concept.local-name}/search:
      summary: Request concept details based on specified concept.
      get:
        operationId: getConceptDetailsByName
        tags: [concept]
        security:
          - OAuth2: []
          - bearerAuth: []
        description: >
          Allows searching for _XBRL concept_ details in _XBRL reports_.
        parameters:
          - name: concept.local-name
            in: path
            description: The concept name in the base schema of a taxonomy exluding the namespace, such as Assets or Liabilities. Use this to search across multiple taxonomies where the local name is known to be consistent over time.
            required: true
            schema:
              type: string
          - $ref: '#/components/parameters/concept.id_Param' 
          - $ref: '#/components/parameters/concept.local-name_Param'
          - $ref: '#/components/parameters/concept.namespace_Param'
          - $ref: '#/components/parameters/dts.entry-point_Param'
          - $ref: '#/components/parameters/dts.hash_Param'
          - $ref: '#/components/parameters/dts.id_Param'
          - $ref: '#/components/parameters/dts.target-namespace_Param'
          - in: query
            name: fields
            required: true
            style: form
            explode: false
            allowEmptyValue : false
            schema:
                 $ref: '#/components/schemas/concept_fields' 
                
            description: This is the list of fields that can be returned for _XBRL concepts_.
          
        responses:
          '200':
            description: __concept details__ successfully accepted
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    paging:
                      $ref: '#/components/schemas/paging'
                    data:
                      type: array
                      items:
                        $ref: '#/components/schemas/concept_details'
                        
          '201':
            $ref: '#/components/responses/invalid_request'
          '400':
            $ref: '#/components/responses/bad_request'
          '401':
            $ref: '#/components/responses/bad_token'
          '405':
            $ref: '#/components/responses/method_not_allowed'
          '500':
            $ref: '#/components/responses/internal_server_error'
            
  /api/v1/label/{dts.id}/search:
      summary: Request label details based on specified dts.id.
      get:
        operationId: getlabelsBasedOnDTS
        tags: [label]
        security:
          - OAuth2: []
          - bearerAuth: []
        description: >
          Search for _XBRL label_ details in a specific _XBRL report_.
        parameters:
          - name: dts.id
            in: path
            required: true
            schema:
              type: integer
            description: The DTS identifier for a given group of taxonomies. XBRL facts and linkbases are typically associated with a given report that is asscociated with a dts.
            example: 321964
          - $ref: '#/components/parameters/label.text_Param'
          - $ref: '#/components/parameters/label.role_Param' 
          - $ref: '#/components/parameters/concept.id_Param' 
          - $ref: '#/components/parameters/concept.local-name_Param'
          - $ref: '#/components/parameters/dts.entry-point_Param'
          
          - in: query
            name: fields
            required: true
            style: form
            explode: false
            allowEmptyValue : false
            schema:
                 $ref: '#/components/schemas/label_fields' 
                
            description: This is the list of fields that can be returned for _XBRL labels_.
          
        responses:
          '200':
            description: __concept details__ successfully accepted
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    paging:
                      $ref: '#/components/schemas/paging'
                    data:
                        type: array
                        items:
                           $ref: '#/components/schemas/label_details_search'
                        
                          
                        
          '201':
            $ref: '#/components/responses/invalid_request'
          '400':
            $ref: '#/components/responses/bad_request'
          '401':
            $ref: '#/components/responses/bad_token'
          '405':
            $ref: '#/components/responses/method_not_allowed'
          '500':
            $ref: '#/components/responses/internal_server_error'
            
  /api/v1/label/search:
      summary: Request label details based on specified parameters.
      get:
        operationId: getlabels
        tags: [label]
        security:
          - OAuth2: []
          - bearerAuth: []
        description: >
          Search for _XBRL label_ details in _XBRL reports_.
        parameters:
          - name: dts.id
            in: query
            required: true
            schema:
              type: integer
            description: The DTS identifier for a given group of taxonomies. XBRL facts and linkbases are typically associated with a given report that is asscociated with a dts.
            example: 321964
          - $ref: '#/components/parameters/label.text_Param'
          - $ref: '#/components/parameters/label.role_Param' 
          - $ref: '#/components/parameters/concept.id_Param' 
          - $ref: '#/components/parameters/concept.local-name_Param'
          - $ref: '#/components/parameters/dts.entry-point_Param'
          
          
          - in: query
            name: fields
            required: true
            style: form
            explode: false
            allowEmptyValue : false
            schema:
                 $ref: '#/components/schemas/label_fields' 
                
            description: This is the list of fields that can be returned for _XBRL labels_.
          
        responses:
          '200':
            description: __label details__ successfully accepted
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    paging:
                      $ref: '#/components/schemas/paging'
                    data:
                        type: array
                        items:
                           $ref: '#/components/schemas/label_details_search'
                     
          '201':
            $ref: '#/components/responses/invalid_request'
          '400':
            $ref: '#/components/responses/bad_request'
          '401':
            $ref: '#/components/responses/bad_token'
          '405':
            $ref: '#/components/responses/method_not_allowed'
          '500':
            $ref: '#/components/responses/internal_server_error'
            
  /api/v1/network/{network.id}/relationship/search:
      summary: Request relationship details from an XBRL filing based on specified network.id. The network ID is an internal ID used by the API. The returned attributes of the network and relationship can be used as search parameters.
      get:
        operationId: getNetworkRelationships
        tags: [network]
        security:
          - OAuth2: []
          - bearerAuth: []
        description: >
          Search all chracteristics of _XBRL relationships_ in a specific _XBRL network_ and filter results based on charateristics of the _XBRL relationships_ in the _XBRL network_. 
        parameters:
          - name: network.id
            in: path
            required: true
            schema:
              type: integer
            description: Unique identifier used to identify a specific network. A different identifier is used for networks with the same role but different linkbase types.
            example: 27624452
          - $ref: '#/components/parameters/dts.entry-point_Param'
          - $ref: '#/components/parameters/dts.id_Param'
          - $ref: '#/components/parameters/network.arcrole-uri_Param'
          - $ref: '#/components/parameters/network.id_Param'
          - $ref: '#/components/parameters/network.link-name_Param'
          - $ref: '#/components/parameters/network.role-description_Param'
          - $ref: '#/components/parameters/network.role-uri_Param'
          - $ref: '#/components/parameters/relationship.id_Param'
          - $ref: '#/components/parameters/relationship.order_Param'
          - $ref: '#/components/parameters/relationship.preferred-label_Param'
          - $ref: '#/components/parameters/relationship.source-concept-id_Param'
          - $ref: '#/components/parameters/relationship.source-name_Param'
          - $ref: '#/components/parameters/relationship.source-namespace_Param'
          - $ref: '#/components/parameters/relationship.target-concept-id_Param'
          - $ref: '#/components/parameters/relationship.target-name_Param'
          - $ref: '#/components/parameters/relationship.target-namespace_Param'
          - $ref: '#/components/parameters/relationship.tree-depth_Param'
          - $ref: '#/components/parameters/relationship.tree-sequence_Param'
          
          
          - in: query
            name: fields
            style: form
            explode: false
            allowEmptyValue : false
            schema:
                 $ref: '#/components/schemas/network_con_relationship_fields' 
                
            description: DTS, network *and* relationship fields can be returned by a nested network/relationship query.
          
        responses:
          '200':
            description: __network details__ successfully accepted
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    paging:
                      $ref: '#/components/schemas/paging'
                    data:
                        type: array
                        items:
                           $ref: '#/components/schemas/network_details'
                     
          '201':
            $ref: '#/components/responses/invalid_request'
          '400':
            $ref: '#/components/responses/bad_request'
          '401':
            $ref: '#/components/responses/bad_token'
          '405':
            $ref: '#/components/responses/method_not_allowed'
          '500':
            $ref: '#/components/responses/internal_server_error'
            
  /api/v1/network/relationship/search:
      summary: Request network and relationship details from XBRL filings based on search parameters.
      get:
        operationId: getNetworkRelationshipsNoID
        tags: [network]
        security:
          - OAuth2: []
          - bearerAuth: []
        description: >
          Search for a specific _XBRL network_ based on _XBRL network_ and _XBRL relationship_ chracteristics.
        parameters:
          - $ref: '#/components/parameters/dts.entry-point_Param'
          - $ref: '#/components/parameters/dts.id_Param'
          - $ref: '#/components/parameters/network.arcrole-uri_Param'
          - $ref: '#/components/parameters/network.id_Param'
          - $ref: '#/components/parameters/network.link-name_Param'
          - $ref: '#/components/parameters/network.role-description_Param'
          - $ref: '#/components/parameters/network.role-uri_Param'
          - $ref: '#/components/parameters/relationship.id_Param'
          - $ref: '#/components/parameters/relationship.order_Param'
          - $ref: '#/components/parameters/relationship.preferred-label_Param'
          - $ref: '#/components/parameters/relationship.source-concept-id_Param'
          - $ref: '#/components/parameters/relationship.source-name_Param'
          - $ref: '#/components/parameters/relationship.source-namespace_Param'
          - $ref: '#/components/parameters/relationship.target-concept-id_Param'
          - $ref: '#/components/parameters/relationship.target-name_Param'
          - $ref: '#/components/parameters/relationship.target-namespace_Param'
          - $ref: '#/components/parameters/relationship.tree-depth_Param'
          - $ref: '#/components/parameters/relationship.tree-sequence_Param'
          
          - in: query
            name: fields
            required: true
            style: form
            explode: false
            allowEmptyValue : false
            schema:
                 $ref: '#/components/schemas/network_con_relationship_fields' 
                
            description: DTS, network *and* relationship fields can be returned by a nested network/relationship query.
          
        responses:
          '200':
            description: __network details__ successfully accepted
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    paging:
                      $ref: '#/components/schemas/paging'
                    data:
                        type: array
                        items:
                           $ref: '#/components/schemas/network_details'
                     
          '201':
            $ref: '#/components/responses/invalid_request'
          '400':
            $ref: '#/components/responses/bad_request'
          '401':
            $ref: '#/components/responses/bad_token'
          '405':
            $ref: '#/components/responses/method_not_allowed'
          '500':
            $ref: '#/components/responses/internal_server_error'
            
  /api/v1/network/{network.id}:
      summary: Request networks details from an XBRL filing based on a specified network ID. The network ID is an internal id used by the API.
      get:
        operationId: getNetworkOnID
        tags: [network]
        security:
          - OAuth2: []
          - bearerAuth: []
        description: >
          Returns the characteristics of a specific _XBRL network_. This does __not__ include the _XBRL relationships_. Use the endpoint /api/v1/network/{network.id}/relationship/search to get relationship information about the network.
        parameters:
          - name: network.id
            in: path
            required: true
            schema:
              type: integer
            description: Unique identifier used to identify a specific network. A different identifier is used for networks with the same role but different linkbase types.
            example: 27624452
          
          
          - in: query
            name: fields
            required: true
            style: form
            explode: false
            allowEmptyValue : false
            schema:
                 $ref: '#/components/schemas/network_fields' 
                
            description: This is the list of network fields that can be returned by the query.
          
        responses:
          '200':
            description: __network details__ successfully accepted
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    paging:
                      $ref: '#/components/schemas/paging'
                    data:
                        type: array
                        items:
                           $ref: '#/components/schemas/network_only_details'
                     
          '201':
            $ref: '#/components/responses/invalid_request'
          '400':
            $ref: '#/components/responses/bad_request'
          '401':
            $ref: '#/components/responses/bad_token'
          '405':
            $ref: '#/components/responses/method_not_allowed'
          '500':
            $ref: '#/components/responses/internal_server_error'
  
  /api/v1/relationship/search:
      summary: Request network and relationship detail from XBRL filings based on search parameters.
      get:
        operationId: getRelationships
        tags: [relationship]
        security:
          - OAuth2: []
          - bearerAuth: []
        description: >
          Search for a specific set of _XBRL relationships_ based on characteristics of the relationship.
        parameters:
          - $ref: '#/components/parameters/dts.id_Param'
          - $ref: '#/components/parameters/network.arcrole-uri_Param'
          - $ref: '#/components/parameters/network.id_Param'
          - $ref: '#/components/parameters/network.link-name_Param'
          - $ref: '#/components/parameters/network.role-description_Param'
          - $ref: '#/components/parameters/network.role-uri_Param'
          - $ref: '#/components/parameters/relationship.id_Param'
          - $ref: '#/components/parameters/relationship.order_Param'
          - $ref: '#/components/parameters/relationship.preferred-label_Param'
          - $ref: '#/components/parameters/relationship.source-concept-id_Param'
          - $ref: '#/components/parameters/relationship.source-name_Param'
          - $ref: '#/components/parameters/relationship.source-namespace_Param'
          - $ref: '#/components/parameters/relationship.target-concept-id_Param'
          - $ref: '#/components/parameters/relationship.target-is-abstract_Param'
          - $ref: '#/components/parameters/relationship.target-name_Param'
          - $ref: '#/components/parameters/relationship.target-namespace_Param'
          - $ref: '#/components/parameters/relationship.tree-depth_Param'
          - $ref: '#/components/parameters/relationship.tree-sequence_Param'
          - $ref: '#/components/parameters/stringmatch_Param'
          
          - in: query
            name: fields
            required: true
            style: form
            explode: false
            allowEmptyValue : false
            schema:
                 $ref: '#/components/schemas/relationship_fields' 
                
            description: This is the list of dts, network and relationship fields that can be returned by the query.
          
        responses:
          '200':
            description: __network details__ successfully accepted
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    paging:
                      $ref: '#/components/schemas/paging'
                    data:
                        type: array
                        items:
                           $ref: '#/components/schemas/relationship_details_search'
                     
          '201':
            $ref: '#/components/responses/invalid_request'
          '400':
            $ref: '#/components/responses/bad_request'
          '401':
            $ref: '#/components/responses/bad_token'
          '405':
            $ref: '#/components/responses/method_not_allowed'
          '500':
            $ref: '#/components/responses/internal_server_error'     
            
  /api/v1/relationship/tree/search:
      summary: Request networks and relationships from XBRL filings based on search parameters.
      get:
        operationId: getRelationshipsAsTree
        tags: [relationship]
        security:
          - OAuth2: []
          - bearerAuth: []
        description: >
          Search a specific set of _XBRL relationships_ based on characteristics of the relationship and returning the data as a tree in different formats.
        parameters:
          - $ref: '#/components/parameters/dts.id_Param'
          - $ref: '#/components/parameters/network.arcrole-uri_Param'
          - $ref: '#/components/parameters/network.id_Param'
          - $ref: '#/components/parameters/network.link-name_Param'
          - $ref: '#/components/parameters/network.role-description_Param'
          - $ref: '#/components/parameters/network.role-uri_Param'
          # - $ref: '#/components/parameters/relationship.id_Param'
          # - $ref: '#/components/parameters/relationship.order_Param'
          # - $ref: '#/components/parameters/relationship.preferred-label_Param'
          # - $ref: '#/components/parameters/relationship.source-concept-id_Param'
          # - $ref: '#/components/parameters/relationship.source-name_Param'
          # - $ref: '#/components/parameters/relationship.source-namespace_Param'
          # - $ref: '#/components/parameters/relationship.target-concept-id_Param'
          # - $ref: '#/components/parameters/relationship.target-name_Param'
          # - $ref: '#/components/parameters/relationship.target-namespace_Param'
          # - $ref: '#/components/parameters/relationship.tree-depth_Param'
          # - $ref: '#/components/parameters/relationship.tree-sequence_Param'
          - in: query
            name: format
            schema:
                type: string
                enum: [flat,fancytree,standard] 
            example: standard
            description: >
                Allows the list of _XBRL relationships_ to be returned in a tree format or be flat. Select from the following
                  * flat: Returns a list of relationship pairs. 
                  * standard: Returns as a standard tree. (No paging data is returned)
                  * fancytree: Returns a network tree in the format for the `fancytree javasript format`. (No paging data is returned so that the results can go straight into a fancy tree object)
                
          - in: query
            name: fields
            required: true
            style: form
            explode: false
            allowEmptyValue : false
            schema:
                 $ref: '#/components/schemas/relationship_fields' 
                
            description: DTS, network *and* relationship fields can be returned from a nested relationship/tree query.
          
        responses:
          '200':
            description: __network details__ successfully accepted
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    paging:
                      $ref: '#/components/schemas/paging'
                    data:
                        type: array
                        items:
                           $ref: '#/components/schemas/relationship_details_search'
                     
          '201':
            $ref: '#/components/responses/invalid_request'
          '400':
            $ref: '#/components/responses/bad_request'
          '401':
            $ref: '#/components/responses/bad_token'
          '405':
            $ref: '#/components/responses/method_not_allowed'
          '500':
            $ref: '#/components/responses/internal_server_error'  

  /api/v1/cube/search:
    summary: Request facts and primary items from XBRL hypercubes based on search parameters.
    get:
      operationId: getCubeDetails
      tags: [cube]
      security:
        - OAuth2: []
        - bearerAuth: []
      description: > 
          Search for _XBRL facts_ or _primary items_ based on the details of a hypercube.  
          
          ## Examples
          
          ### _-Get all the facts in a cube
          
          
          The following call will: get all facts in the report with an id of `226471`; limit the number of records returned to `1010` facts; sort facts `A-Z by the concept name`, and; return the following values:
            * dimensions.count
            * dimensions
            * period.fiscal-period
            * period.year
            * cube.primary-local-name.sort(ASC)
            * fact.numerical-value
            * fact.limit(1010)
            * fact.value
            * report.source-id
          
                  https://api.xbrl.us/api/v1/cube/search?report.id=226471&fields=dimensions.count,dimensions,period.fiscal-period,period.year,cube.primary-local-name.sort(ASC),fact.numerical-value,cube.limit(1010),fact.value
          
              
          
      parameters: 
        - $ref: '#/components/parameters/cube.drs-role-uri_Param'
        - $ref: '#/components/parameters/cube.id_Param'
        - $ref: '#/components/parameters/cube.primary_local_name_Param'
        - $ref: '#/components/parameters/cube.primary_namespace_Param'
        - $ref: '#/components/parameters/cube.table-local-name_Param'
        - $ref: '#/components/parameters/cube.table-namespace_Param'
        - $ref: '#/components/parameters/cube.tree-depth_Param'
        - $ref: '#/components/parameters/cube.tree-sequence_Param'
        - $ref: '#/components/parameters/dimensions.count_Param'
        - $ref: '#/components/parameters/dts.id_Param'
        - $ref: '#/components/parameters/fact.id_Param'
        - $ref: '#/components/parameters/fact.is-extended_Param'
        - $ref: '#/components/parameters/fact.value_Param'
        - $ref: '#/components/parameters/period.calendar-period_Param'
        - $ref: '#/components/parameters/period.fiscal-period_Param'
        - $ref: '#/components/parameters/period.fiscal-year_Param'
        - $ref: '#/components/parameters/period.year_Param'
        - $ref: '#/components/parameters/report.accession_Param'
        - $ref: '#/components/parameters/report.id_Param'
        - $ref: '#/components/parameters/unit_Param'
        - in: query
          name: fields
          required: true
          style: form
          explode: false
          allowEmptyValue : false
          schema:
            $ref: '#/components/schemas/cube_fields'
          description: This is the list of fields that can be returned for _XBRL cubes_.
          
      responses:
        '200':
          description: __cube details__ successfully accepted
          content:
            application/json:
              schema:
                type: object
                properties:
                  paging:
                    $ref: '#/components/schemas/paging'
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/cube_details'
        '201':
          $ref: '#/components/responses/invalid_request'
        '400':
          $ref: '#/components/responses/bad_request'
        '401':
          $ref: '#/components/responses/bad_token'
        '405':
          $ref: '#/components/responses/method_not_allowed'
        '500':
          $ref: '#/components/responses/internal_server_error'

  /api/v1/dimension/search:
    summary: Request dimensions and members from XBRL hypercubes based on search parameters.
    get:
      operationId: getCubeDimensions
      tags: [dimension]
      security:
        - OAuth2: []
        - bearerAuth: []
      description: > 
          Search for _XBRL dimensions_ or _members_  of a specific hypercube.  
          
          ## Examples
          
          ### _-Get all the dimensions and members of a cube
          
          
          The following call will: get dimensions of the dts id of `226471`;  and; return the following values:
            * cube.table-local-name
            * cube.id
            * cube.drs-role-uri
          
                  https://api.xbrl.us/api/v1/dimension/search?dts.id=226471&fields=cube.table-local-name,cube.id,cube.drs-role-uri
          
              
          
      parameters: 
        - $ref: '#/components/parameters/cube.default-local-name_Param'
        #- $ref: '#/components/parameters/cube.default.namespace_Param'
        #- $ref: '#/components/parameters/cube.description_Param'
        - $ref: '#/components/parameters/cube.dimension-local-name_Param'
        #- $ref: '#/components/parameters/cube.dimension.namespace_Param'
        - $ref: '#/components/parameters/cube.drs-role-uri_Param'
        - $ref: '#/components/parameters/cube.id_Param'
        - $ref: '#/components/parameters/cube.is-domain_Param'
        - $ref: '#/components/parameters/cube.is-explicit_Param'
        - $ref: '#/components/parameters/cube.member-local-name_Param'
        #- $ref: '#/components/parameters/cube.member-namespace_Param'
        - $ref: '#/components/parameters/cube.member-tree-depth_Param'
        - $ref: '#/components/parameters/cube.member-tree-sequence_Param'
        - $ref: '#/components/parameters/cube.table-local-name_Param'
        - $ref: '#/components/parameters/cube.table-namespace_Param'
        #- $ref: '#/components/parameters/cube.typed-domain-element-name_Param'
        - $ref: '#/components/parameters/dts.id_Param'

        - in: query
          name: fields
          required: true
          style: form
          explode: false
          allowEmptyValue : false
          schema:
            $ref: '#/components/schemas/dimension_fields'
          description: This is the list of fields that can be returned for _XBRL cubes_.
          
      responses:
        '200':
          description: __cube details__ successfully accepted
          content:
            application/json:
              schema:
                type: object
                properties:
                  paging:
                    $ref: '#/components/schemas/paging'
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/dimension_details'
        '201':
          $ref: '#/components/responses/invalid_request'
        '400':
          $ref: '#/components/responses/bad_request'
        '401':
          $ref: '#/components/responses/bad_token'
        '405':
          $ref: '#/components/responses/method_not_allowed'
        '500':
          $ref: '#/components/responses/internal_server_error'

  /api/v1/document/search:
      summary: Request document details from XBRL filings based on search parameters.
      get:
        operationId: getDocumentInfo
        tags: [document]
        security:
          - OAuth2: []
          - bearerAuth: []
        description: >
          Search _XBRL documents_ and their content.
        parameters:
          - $ref: '#/components/parameters/document.text-search_Param'
          - $ref: '#/components/parameters/document.top-level_Param'
          - $ref: '#/components/parameters/document.uri_Param'
          - $ref: '#/components/parameters/dts.id_Param'
          
          - in: query
            name: fields
            required: true
            style: form
            explode: false
            allowEmptyValue : false
            schema:
                 $ref: '#/components/schemas/document_fields' 
                
            description: |
                List of fields to return. 
                Available fields are as follows:  
                  * document.example 
                  * document.highlighted-vaule
                  * document.top-level
                  * document.tree-level
                  * document.tree-order
                  * document.type
                  * document.uri
                  * dts.id
                  * document.*
                
                To limit the values returned use document._limit(n)_
                
                To sort on a field use the field followed by .sort. For example to sort in ascending order for document.uri then enter document.uri._sort(ASC)_ as a return field.
          
        responses:
          '200':
            description: __network details__ successfully accepted
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    paging:
                      $ref: '#/components/schemas/paging'
                    data:
                        type: array
                        items:
                           $ref: '#/components/schemas/document_details'
                     
          '201':
            $ref: '#/components/responses/invalid_request'
          '400':
            $ref: '#/components/responses/bad_request'
          '401':
            $ref: '#/components/responses/bad_token'
          '405':
            $ref: '#/components/responses/method_not_allowed'
          '500':
            $ref: '#/components/responses/internal_server_error'   
                               
components:
  securitySchemes:
    OAuth2:
      type: oauth2
      flows:
        password:
          tokenUrl: /oauth2/token
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
    
  schemas:
    authorization_grant:
      type: object
      required: [grant_type, client_id, client_secret]
      properties:
        grant_type:
          type: string
          example: password
          description: >
            Used to identify which credentials the authorization server needs to check
              * **client_credentials** - Requires a client_id and client_secret only
              * **password** - Requires a username and password as well as client_id and client_secret
        client_id:
          type: string
          example: XBRL US
          description: Unique identifier agreed upon by **XBRL US** and the 3rd party client
        client_secret:
          type: string
          example: xhOEnAX2M...gaIYLXOvCe25Q
          format: byte
          description: Base64 key used to authenticate the 3rd party client
        username:
          type: string
          example: joe90@WorldIntelligenceNetwork.org
          description: Unique identifier for a given user
        password:
          type: string
          format: password
          example: someSecurePassword
          description: Password used to authenticate the 3rd party user
        platform:
          type: string
          example: github
          description: Identifies the platform that is requesting the token (i.e. <YourProgramName>)
    error_message:
      type: object
      properties:
        errors:
          type: string
          description: Identifier for the error
        error_description:
          type: string
          description: Adds more details to the error
    paging:
      type: object
      properties: 
        limit:
          type: integer
          example: 1000
        offset:
          type: integer
          example: -1
        count:
          type: integer
          example: 1
    dimensions:
      type: object
      properties:
        dimension_namespace: 
          type: string
        dimension_local_name: 
          type: string
        member_namespace: 
          type: string
        member_local_name: 
          type: string
    facts_oim_json:
      type: object
      additionalProperties:
        type: object
        properties:
          value:
            type: string
          accuracy:
            type: integer
      
    documentInfo_oim_json:
      type: object
      properties:
        documentType:
          type: string
          example: http://www.xbrl.org/WGWD/YYYY-MM-DD/xbrl-json
        features:
          type: object
          properties:
            xbrl:canonicalValues: 
              type: boolean
        prefixes:
          type: object
          additionalProperties:
            type: string
          example:
            xbrl: "http://www.xbrl.org/WGWD/YYYY-MM-DD/oim"
            p1: "http://www.xbrl.org/2003/iso4217"
            p2: "http://fasb.org/us-gaap/2016-01-31"
            p3: "http://www.sec.gov/CIK"
            p4: "http://www.xbrl.org/2003/instance"
            p5: "http://niocorp.com/20161231"
            p6: "http://xbrl.sec.gov/currency/2016-01-31"
            p7: "http://xbrl.sec.gov/dei/2014-01-31"
        taxonomy:
          type: array
          items:
            type: string
            example: 
              "http://www.sec.gov/Archives/edgar/data/1512228/000161577417000360/niobf-20161231.xsd"

    
    assertion_fields:
      type: array
      items:
        type: string
        enum: [
              assertion.code
              ,assertion.detail
              ,assertion.effective_date
              ,assertion.rule_focus
              ,assertion.run-date
              ,assertion.severity
              ,assertion.source
              ,assertion.type
              ,entity.cik
              ,entity.name
              ,report.accepted-timestamp
              ,report.accession
              ,report.base-taxonomy
              ,report.creation-software
              ,report.document-type
              ,report.entry-url
              ,report.filing-date
              ,report.filing-year
              ,report.id
              ,report.sec-url
              ,report.sic-code
              ]
     
    concept_fields:
      type: array
      items:
        type: string
        enum: [
              concept.balance-type
              ,concept.datatype
              ,concept.id
              ,concept.is-abstract
              ,concept.is-monetary
              ,concept.is-nillable
              ,concept.is-numeric
              ,concept.local-name
              ,concept.namespace
              ,concept.period-type
              ,concept.substitution
              ,dts.id
              ,dts.entry-point
              ,dts.hash
              ,dts.target-namespace
              ,concept.*
              ,label.id
              ,label.text
              ,label.lang
              ,label.role
              ,label.role-short
              ,label.*
              ,reference.role
              ,reference.role-definition
              ,reference.role-short
              ,reference.*
              ,parts.local-name
              ,parts.namespace
              ,parts.order
              ,parts.part-value
              ,reference.id
              ,parts.*]

    cube_fields:
      type: array
      items:
        type: string
        default: cube.*
        enum: [
              cube.description
              ,cube.drs-role-uri
              ,cube.id
              ,cube.primary-local-name
              ,cube.primary-namespace
              ,cube.table-local-name
              ,cube.table-namespace
              ,cube.tree-depth
              ,cube.tree-sequence
              ,dimensions
              ,dimensions.count
              ,dts.id
              ,fact.decimals
              ,fact.id
              ,fact.is-extended
              ,fact.numerical-value
              ,fact.value
              ,fact.value-link
              ,fact.xml-id
              ,period.calendar-period
              ,period.fiscal-period
              ,period.fiscal-year
              ,period.year
              ,report.accession
              ,report.id
              ,unit
              ,cube.*]

    dimension_fields:
      type: array
      items:
        type: string
        default: dimension.*
        enum: [
              cube.default-local-name
              ,cube.default.namespace
              ,cube.description
              ,cube.drs-role-uri
              ,cube.id
              ,cube.dimension-local-name
              ,cube.dimension.namespace
              ,cube.is-domain
              ,cube.is-explicit
              ,cube.member-local-name
              ,cube.member-namespace
              ,cube.member-tree-depth
              ,cube.member-tree-sequence
              ,cube.table-local-name
              ,cube.table-namespace
              ,cube.typed-domain-element-name
              ,dts.id

              ,dimension.*]  

    document_fields:
      type: array
      items:
        type: string
        enum: [
              document.example
              ,document.highlighted-value
              ,document.top-level
              ,document.tree-level
              ,document.tree-order
              ,document.type
              ,document.uri
              ,dts.id
              ,document.*
               ]     
              
    dts_fields:
      type: array
      items:
        type: string
        enum: [
              dts.entity-name
              ,dts.hash
              ,dts.id
              ,dts.entry-point
              ,dts.taxonomy
              ,dts.taxonomy-name
              ,dts.version
              ,report.accession
              ,report.id
              ,dts.*
              ]
    entity_only_fields:
      type: array
      items:
        type: string
        enum: [entity.cik
              ,entity.id
              ,entity.name
              ,entity.scheme
              ,entity.ticker
              ,entity.*
              ]
    entity_fields:
      type: array
      items:
        type: string
        enum: [entity.cik
              ,entity.id
              ,entity.name
              ,entity.scheme
              ,entity.ticker
              ,dts.id
              ,report.accepted-timestamp
              ,report.accession
              ,report.address
              ,report.base-taxonomy
              ,report.creation-software
              ,report.document-type
              ,report.entity-name
              ,report.entry-type
              ,report.entry-url
              ,report.filer-category
              ,report.filing-date
              ,report.id
              ,report.is-most-current
              ,report.period-end
              ,report.period-index
              ,report.phone
              ,report.properties
              ,report.restated
              ,report.restated-index
              ,report.sec-url
              ,report.sic-code
              ,report.source-id
              ,report.source-name
              ,report.state-of-incorporation
              ,entity.*
              ,report.*
              ]
              
    fact_fields:
      type: array
      items:
        type: string
        default: fact.*
        enum: [
              concept.balance-type
              ,concept.datatype
              ,concept.id
              ,concept.is-base
              ,concept.is-monetary
              ,concept.local-name
              ,concept.namespace
              ,concept.period-type
              ,dimension.is-base
              ,dimension.local-name
              ,dimension.namespace
              ,dimensions
              ,dimensions.count
              ,dimensions.id
              ,dts.entry-point
              ,dts.id
              ,dts.target-namespace
              ,entity.cik
              ,entity.id
              ,entity.name
              ,entity.scheme
              ,fact.decimals
              ,fact.example
              ,fact.has-dimensions
              ,fact.hash
              ,fact.highlighted-value
              ,fact.id
              ,fact.inline-display-value
              ,fact.inline-is-hidden
              ,fact.inline-negated
              ,fact.inline-scale
              ,fact.is-extended
              ,fact.numerical-value
              ,fact.ultimus
              ,fact.ultimus-index
              ,fact.value
              ,fact.value-link
              ,fact.xml-id
              ,member.is-base
              ,member.local-name
              ,member.typed-value
              ,member.member-value
              ,member.namespace
              ,period.calendar-period
              ,period.end
              ,period.fiscal-id
              ,period.fiscal-period
              ,period.fiscal-year
              ,period.id
              ,period.instant
              ,period.start
              ,period.year
              ,report.accession
              ,report.creation-software
              ,report.document-type
              ,report.entry-url
              ,report.filing-date
              ,report.id
              ,report.period-end
              ,report.restated
              ,report.restated-index
              ,report.sec-url
              ,report.sic-code
              ,report.source-id
              ,report.source-name
              ,report.type
              ,unit
              ,unit.denominator
              ,unit.numerator
              ,unit.qname
              ,fact.*]

    label_fields:
      type: array
      items:
        type: string
        enum: [
              concept.id
              ,concept.local-name
              ,concept.namespace
              ,dts.id
              ,dts.entry-point
              ,label.id
              ,label.text
              ,label.lang
              ,label.role
              ,label.role-short
              ,label.*
              ]
    network_fields:
      type: array
      items:
        type: string
        default: network.arcrole-uri
        enum: [
              dts.entry-point
              ,dts.id
              ,network.arcrole-uri
              ,network.id
              ,network.link-name
              ,network.role-description
              ,network.role-uri
              ]
              
    network_con_relationship_fields:
      type: array
      items:
        type: string
        default: network.role-description
        enum: [
              dts.entry-point
              ,dts.id
              ,network.arcrole-uri
              ,network.id
              ,network.link-name
              ,network.role-description
              ,network.role-uri
              ,relationship.id
              ,relationship.order
              ,relationship.preferred-label
              ,relationship.source-concept-id
              ,relationship.source-is-abstract
              ,relationship.source-name
              ,relationship.source-namespace
              ,relationship.target-concept-id
              ,relationship.target-datatype
              ,relationship.target-is-abstract
              ,relationship.target-name
              ,relationship.target-namespace
              ,relationship.tree-depth
              ,relationship.tree-sequence
              ,relationship.weight
              ]
              
    reference_fields:
      type: array
      items:
        type: string
        enum: [
              concept.id
              ,concept.local-name
              ,concept.namespace
              ,dts.id
              ,dts.entry-point
              ,reference.id
              ,reference.role
              ,reference.role-definition
              ,reference.role-short
              ,reference.*
              ,parts.local-name
              ,parts.namespace
              ,parts.order
              ,parts.part-value
              ,parts.*
              ] 
              
    relationship_fields:
      type: array
      default: network.role-description
      items:
        type: string
        default: network.role-description
        enum: [
              dts.id
              ,network.arcrole-uri
              ,network.id
              ,network.link-name
              ,network.role-description
              ,network.role-uri
              ,relationship.id
              ,relationship.order
              ,relationship.preferred-label
              ,relationship.source-concept-id
              ,relationship.source-is-abstract
              ,relationship.source-name
              ,relationship.source-namespace
              ,relationship.target-concept-id
              ,relationship.target-datatype
              ,relationship.target-is-abstract
              ,relationship.target-name
              ,relationship.target-namespace
              ,relationship.tree-depth
              ,relationship.tree-sequence
              ,relationship.weight
              ]
              
    report_fields:
      type: array
      items:
        type: string
        default: report.*
        enum: [
              entity.cik
              ,entity.id
              ,entity.ticker
              ,dts.id
              ,report.accepted-timestamp
              ,report.accession
              ,report.address
              ,report.base-taxonomy
              ,report.creation-software
              ,report.document-type
              ,report.entity-name
              ,report.entry-type
              ,report.entry-url
              ,report.filer-category
              ,report.filing-date
              ,report.id
              ,report.is-most-current
              ,report.period-end
              ,report.period-index
              ,report.phone
              ,report.properties
              ,report.restated
              ,report.restated-index
              ,report.sec-url
              ,report.sic-code
              ,report.source-id
              ,report.source-name
              ,report.state-of-incorporation
              ,report.*
              ]
              
    report_and_fact_fields:
      type: array
      items:
        type: string
        default: fact.*
        enum: [
              concept.balance-type
              ,concept.datatype
              ,concept.id
              ,concept.is-base
              ,concept.is-monetary
              ,concept.local-name
              ,concept.namespace
              ,concept.period-type
              ,dimension.is-base
              ,dimension.local-name
              ,dimension.namespace
              ,dimensions
              ,dimensions.count
              ,dimensions.id
              ,dts.entry-point
              ,dts.id
              ,dts.target-namespace
              ,entity.cik
              ,entity.id
              ,entity.name
              ,entity.scheme
              ,fact.decimals
              ,fact.example
              ,fact.has-dimensions
              ,fact.hash
              ,fact.highlighted-value
              ,fact.id
              ,fact.inline-display-value
              ,fact.inline-is-hidden
              ,fact.inline-negated
              ,fact.inline-scale
              ,fact.is-extended
              ,fact.numerical-value
              ,fact.ultimus
              ,fact.ultimus-index
              ,fact.value
              ,fact.value-link
              ,fact.xml-id
              ,member.is-base
              ,member.local-name
              ,member.typed-value
              ,member.member-value
              ,member.namespace
              ,period.calendar-period
              ,period.end
              ,period.fiscal-id
              ,period.fiscal-period
              ,period.fiscal-year
              ,period.id
              ,period.instant
              ,period.start
              ,period.year
              ,report.accepted-timestamp
              ,report.accession
              ,report.address
              ,report.base-taxonomy
              ,report.creation-software
              ,report.document-type
              ,report.entity-name
              ,report.entry-type
              ,report.entry-url
              ,report.filer-category
              ,report.filing-date
              ,report.id
              ,report.is-most-current
              ,report.period-end
              ,report.period-index
              ,report.phone
              ,report.properties
              ,report.restated
              ,report.restated-index
              ,report.sec-url
              ,report.sic-code
              ,report.source-id
              ,report.source-name
              ,report.state-of-incorporation
              ,report.*
              ,unit
              ,unit.denominator
              ,unit.numerator
              ,unit.qname
              ,fact.*]

    assertion_details:
      type: object
      properties:
        assertion.code:
          $ref: '#/components/schemas/assertion_code'
        assertion.detail:
          $ref: '#/components/schemas/assertion_detail'
        assertion.effective_date:
          $ref: '#/components/schemas/assertion_effective_date'
        assertion.rule_focus:
          $ref: '#/components/schemas/assertion_rule_focus'
        assertion.run-date:
          $ref: '#/components/schemas/assertion_run-date'
        assertion.severity:
          $ref: '#/components/schemas/assertion_severity'
        assertion.source:
          $ref: '#/components/schemas/assertion_source'
        assertion.type:
          $ref: '#/components/schemas/assertion_type'
        entity.name:
          $ref: '#/components/schemas/entity_name'
        report.accepted-timestamp:
          $ref: '#/components/schemas/report_accepted-timestamp'
        report.accession:
          $ref: '#/components/schemas/report_accession'
        report.base-taxonomy:
          $ref: '#/components/schemas/report_base-taxonomy'
        report.creation-software:
           $ref: '#/components/schemas/report_creation-software'
        report.document-type:
           $ref: '#/components/schemas/report_document-type'
        report.entry-url:
           $ref: '#/components/schemas/report_entry-url'
        report.filing-date:
           $ref: '#/components/schemas/report_filing-date'
        report.id:
           $ref: '#/components/schemas/report_id'
        report.sec-url:
           $ref: '#/components/schemas/report_sec-url'
        report.sic-code:
           $ref: '#/components/schemas/report_sic-code'

    cube_details: 
      type: object
      properties:
        cube.description:
          $ref: '#/components/schemas/network_role-description'
        cube.drs-role-uri:
          $ref: '#/components/schemas/cube_drs_role-uri'
        cube.id:
          $ref: '#/components/schemas/cube_id'
        cube.primary-local-name:
          $ref: '#/components/schemas/concept_local-name'
        cube.primary_namespace:
          $ref: '#/components/schemas/concept_namespace'
        cube.table-local-name:
          $ref: '#/components/schemas/concept_local-name'
        cube.table_namespace:
          $ref: '#/components/schemas/concept_namespace'
        cube.tree-depth:
          $ref: '#/components/schemas/relationship_tree-depth'
        cube.tree-sequence:
          $ref: '#/components/schemas/relationship_tree-sequence'
        dimensions:
          $ref: '#/components/schemas/dimensions_object'
        dimensions.count:
          $ref: '#/components/schemas/dimensions_count'
        dts.id:
          $ref: '#/components/schemas/dts_id'
        fact.decimals:
          $ref: '#/components/schemas/fact_decimals'
        fact.id:
          $ref: '#/components/schemas/fact_id'
        fact.is-extended:
          $ref: '#/components/schemas/fact_is-extended'
        fact.numerical-value:
          $ref: '#/components/schemas/fact_numerical-value'
        fact.value:
          $ref: '#/components/schemas/fact_value'
        period.calendar-period:
          $ref: '#/components/schemas/period_calendar-period'
        period.fiscal-period:
          $ref: '#/components/schemas/period_fiscal-period'
        period.fiscal-year:
          $ref: '#/components/schemas/period_fiscal-year'
        period.year:
          $ref: '#/components/schemas/period_year'
        report.accession:
          $ref: '#/components/schemas/report_accession'
        report.id:
          $ref: '#/components/schemas/report_id'
        unit:
          $ref: '#/components/schemas/unit'

    dimension_details: 
      type: object
      properties:
        cube.default-local-name:
          $ref: '#/components/schemas/member_local-name'
        cube.default-namespace:
           $ref: '#/components/schemas/member_namespace'
        cube.description:
          $ref: '#/components/schemas/network_role-description'
        cube.dimension-local-name:
          $ref: '#/components/schemas/dimension_local-name'
        cube.dimension-namespace:
           $ref: '#/components/schemas/dimension_namespace'
        cube.drs-role-uri:
          $ref: '#/components/schemas/cube_drs_role-uri'
        cube.id:
          $ref: '#/components/schemas/cube_id'
        cube.is-domain:
          $ref: '#/components/schemas/concept_local-name'
        cube.is-explicit:
          $ref: '#/components/schemas/concept_namespace'
        cube.member-local-name:
          $ref: '#/components/schemas/member_local-name'
        cube.member-namespace:
           $ref: '#/components/schemas/member_namespace'
        cube.member-tree-depth:
          $ref: '#/components/schemas/relationship_tree-depth'
        cube.member-tree-sequence:
          $ref: '#/components/schemas/relationship_tree-sequence'
        cube.table-local-name:
          $ref: '#/components/schemas/concept_local-name'
        cube.table_namespace:
          $ref: '#/components/schemas/concept_namespace'
        cube.typed-domain-element-name:
          $ref: '#/components/schemas/cube.typed-domain-element-name'
        dts.id:
          $ref: '#/components/schemas/dts_id'
        
    document_details: 
      type: object
      properties:
        document.example:
          $ref: '#/components/schemas/document_example'
        document.highlighted-value:
          $ref: '#/components/schemas/document_highlighted-value'
        document.top-level:
          $ref: '#/components/schemas/document_top-level'
        document.tree-level:
          $ref: '#/components/schemas/document_tree-level'
        document.tree-order:
          $ref: '#/components/schemas/document_tree-order'
        document.type:
          $ref: '#/components/schemas/document_type'
        document.uri:
          $ref: '#/components/schemas/document_uri'
        dts.content:
          $ref: '#/components/schemas/dts_content'
        dts.id:
          $ref: '#/components/schemas/dts_id'
 
    entity_details: 
      type: object
      properties:
        entity.cik:
          $ref: '#/components/schemas/entity_cik'
        entity.id:
          $ref: '#/components/schemas/entity_id'
        entity.name:
          $ref: '#/components/schemas/entity_name'
        entity.scheme:
          $ref: '#/components/schemas/entity_scheme'
        entity.ticker:
          $ref: '#/components/schemas/entity_ticker'
        report:
          $ref: '#/components/schemas/report_sans_entity_details'
                
          
    fact_details: 
      type: object
      properties:
        concept.balance-type:
          $ref: '#/components/schemas/concept_balance-type'
        concept.datatype:
          $ref: '#/components/schemas/concept_datatype'
        concept.id:
          $ref: '#/components/schemas/concept_id'
        concept.is-base:
          $ref: '#/components/schemas/concept_is-base'
        concept.is-monetary:
          $ref: '#/components/schemas/concept_is-monetary'
        concept.local-name:
          $ref: '#/components/schemas/concept_local-name'
        concept.namespace:
          $ref: '#/components/schemas/concept_namespace'
        concept.period-type:
          $ref: '#/components/schemas/concept_period-type'
        dimension.is-base:
          $ref: '#/components/schemas/concept_is-base'
        dimension.local-name:
          $ref: '#/components/schemas/dimension_local-name'
        dimension.namespace:
          $ref: '#/components/schemas/dimension_namespace'
        dimensions:
          $ref: '#/components/schemas/dimensions_object'
        dimensions.count:
          $ref: '#/components/schemas/dimensions_count'
        dimensions.id:
          $ref: '#/components/schemas/dimensions_id'
        dts.entry-point:
          $ref: '#/components/schemas/dts_entry-point'
        dts.id:
          $ref: '#/components/schemas/dts_id'
        dts.target-namespace:
          $ref: '#/components/schemas/dts_target-namespace'
        entity.cik:
          $ref: '#/components/schemas/entity_cik'
        entity.id:
          $ref: '#/components/schemas/entity_id'
        entity.name:
          $ref: '#/components/schemas/entity_name'
        entity.scheme:
          $ref: '#/components/schemas/entity_scheme'
        fact.decimals:
          $ref: '#/components/schemas/fact_decimals'
        fact.example:
          $ref: '#/components/schemas/fact_example'
        fact.has-dimensions:
          $ref: '#/components/schemas/fact_has-dimensions'
        fact.hash:
          $ref: '#/components/schemas/fact_hash'
        fact.highlighted-value:
          $ref: '#/components/schemas/fact_highlighted-value'
        fact.id:
          $ref: '#/components/schemas/fact_id'
        fact.inline-display-value:
          $ref: '#/components/schemas/fact_inline-display-value'
        fact.inline-is-hidden:
          $ref: '#/components/schemas/fact_inline-is-hidden'
        fact.inline-negated:
          $ref: '#/components/schemas/fact_inline-negated'
        fact.inline-scale:
          $ref: '#/components/schemas/fact_inline-scale'
        fact.is-extended:
          $ref: '#/components/schemas/fact_is-extended'
        fact.numerical-value:
          $ref: '#/components/schemas/fact_numerical-value'
        fact.ultimus:
          $ref: '#/components/schemas/fact_ultimus'
        fact.ultimus-index:
          $ref: '#/components/schemas/fact_ultimus-index'
        fact.value:
          $ref: '#/components/schemas/fact_value'
        fact.value-link:
          $ref: '#/components/schemas/fact_value-link'
        fact.xml-id:
          $ref: '#/components/schemas/fact_xml-id'
        member.is-base:
          $ref: '#/components/schemas/member_is-base'
        member.local-name:
          $ref: '#/components/schemas/member_local-name'
        member.typed-value:
          $ref: '#/components/schemas/member_typed-value'
        member.member-value:
          $ref: '#/components/schemas/member_member-value'
        member.namespace:
          $ref: '#/components/schemas/member_namespace'
        period.calendar-period:
          $ref: '#/components/schemas/period_calendar-period'
        period.end:
          $ref: '#/components/schemas/period_end'
        period.fiscal-id:
          $ref: '#/components/schemas/period_fiscal-id'
        period.fiscal-period:
          $ref: '#/components/schemas/period_fiscal-period'
        period.fiscal-year:
          $ref: '#/components/schemas/period_fiscal-year'
        period.id:
          $ref: '#/components/schemas/period_id'
        period.instant:
          $ref: '#/components/schemas/period_instant'
        period.start:
          $ref: '#/components/schemas/period_start'
        period.year:
          $ref: '#/components/schemas/period_year'
        report.accession:
          $ref: '#/components/schemas/report_accession'
        report.creation-software:
          $ref: '#/components/schemas/report_creation-software'
        report.document-type:
          $ref: '#/components/schemas/report_document-type'
        report.entry-url:
          $ref: '#/components/schemas/report_entry-url'
        report.filing-date:
          $ref: '#/components/schemas/report_filing-date'
        report.id:
          $ref: '#/components/schemas/report_id'
        report.period-end:
          $ref: '#/components/schemas/report_period-end'
        report.restated:
          $ref: '#/components/schemas/report_restated'
        report.restated-index:
          $ref: '#/components/schemas/report_restated-index'
        report.sec-url:
          $ref: '#/components/schemas/report_sec-url'
        report.sic-code:
          $ref: '#/components/schemas/report_sic-code'
        report.source-id:
          $ref: '#/components/schemas/report_source-id'
        report.source-name:
          $ref: '#/components/schemas/report_source-name'
        unit:
          $ref: '#/components/schemas/unit'
        unit.denominator:
          $ref: '#/components/schemas/unit_denominator'
        unit.numerator:
          $ref: '#/components/schemas/unit_numerator'
        unit.qname:
          $ref: '#/components/schemas/unit_qname'
    
    network_only_details:
      type: object
      properties: 
        dts.entry-point:
          $ref: '#/components/schemas/dts_entry-point'
        dts.id:
          $ref: '#/components/schemas/dts_id'
        network.arcrole-uri:
          $ref: '#/components/schemas/network_arcrole-uri'
        network.id:
           $ref: '#/components/schemas/network_id'
        network.link-name:
          $ref: '#/components/schemas/network_link-name'
        network.role-description:
          $ref: '#/components/schemas/network_role-description'
        network.role-uri:
          $ref: '#/components/schemas/network_role-uri'
          
    network_details:
      type: object
      properties:
        dts.entry-point:
          $ref: '#/components/schemas/dts_entry-point'
        dts.id:
          $ref: '#/components/schemas/dts_id'
        network.arcrole-uri:
          $ref: '#/components/schemas/network_arcrole-uri'
        network.id:
           $ref: '#/components/schemas/network_id'
        network.link-name:
          $ref: '#/components/schemas/network_link-name'
        network.role-description:
          $ref: '#/components/schemas/network_role-description'
        network.role-uri:
          $ref: '#/components/schemas/network_role-uri'
        relationship:
          type: object
          properties:
            paging:
              $ref: '#/components/schemas/paging'
            data:
              type: array
              items:
                $ref: '#/components/schemas/relationship_details'
          
          
    report_details:
      type: object
      properties:
        dts.id:
          $ref: '#/components/schemas/dts_id'
        entity.cik:
          $ref: '#/components/schemas/entity_cik'
        entity.id:
          $ref: '#/components/schemas/entity_id'
        entity.ticker:
          $ref: '#/components/schemas/entity_ticker'
        report.accession:
          $ref: '#/components/schemas/report_accession'
        report.address:
          $ref: '#/components/schemas/report_address'
        report.base-taxonomy:
          $ref: '#/components/schemas/report_base-taxonomy'
        report.checks-run:
          $ref: '#/components/schemas/report_checks-run'
        report.creation-software:
           $ref: '#/components/schemas/report_creation-software'
        report.document-type:
           $ref: '#/components/schemas/report_document-type'
        report.entity-name:
           $ref: '#/components/schemas/report_entity-name'
        report.entry-type:
           $ref: '#/components/schemas/report_entry-type'
        report.entry-url:
           $ref: '#/components/schemas/report_entry-url'
        report.filer-category:
           $ref: '#/components/schemas/report_filer-category'
        report.filing-date:
           $ref: '#/components/schemas/report_filing-date'
        report.id:
           $ref: '#/components/schemas/report_id'
        report.is-most-current:
           $ref: '#/components/schemas/report_is-most-current'
        report.period-end:
           $ref: '#/components/schemas/report_period-end'
        report.period-index:
           $ref: '#/components/schemas/report_period-index'
        report.phone:
           $ref: '#/components/schemas/report_phone'
        report.restated:
           $ref: '#/components/schemas/report_restated'
        report.restated-index:
           $ref: '#/components/schemas/report_restated-index'
        report.sec-url:
           $ref: '#/components/schemas/report_sec-url'
        report.sic-code:
           $ref: '#/components/schemas/report_sic-code'
        report.source-id:
           $ref: '#/components/schemas/report_source-id'
        report.source-name:
           $ref: '#/components/schemas/report_source-name'
        report.state-of-incorporation:
           $ref: '#/components/schemas/report_state-of-incorporation'
           
    report_sans_entity_details:
      type: object
      properties:
        dts.id:
          $ref: '#/components/schemas/dts_id'
        report.accession:
          $ref: '#/components/schemas/report_accession'
        report.address:
          $ref: '#/components/schemas/report_address'
        report.base-taxonomy:
          $ref: '#/components/schemas/report_base-taxonomy'
        report.checks-run:
          $ref: '#/components/schemas/report_checks-run'
        report.creation-software:
           $ref: '#/components/schemas/report_creation-software'
        report.document-type:
           $ref: '#/components/schemas/report_document-type'
        report.entity-name:
           $ref: '#/components/schemas/report_entity-name'
        report.entry-type:
           $ref: '#/components/schemas/report_entry-type'
        report.entry-url:
           $ref: '#/components/schemas/report_entry-url'
        report.filer-category:
           $ref: '#/components/schemas/report_filer-category'
        report.filing-date:
           $ref: '#/components/schemas/report_filing-date'
        report.id:
           $ref: '#/components/schemas/report_id'
        report.is-most-current:
           $ref: '#/components/schemas/report_is-most-current'
        report.period-end:
           $ref: '#/components/schemas/report_period-end'
        report.period-index:
           $ref: '#/components/schemas/report_period-index'
        report.phone:
           $ref: '#/components/schemas/report_phone'
        report.restated:
           $ref: '#/components/schemas/report_restated'
        report.restated-index:
           $ref: '#/components/schemas/report_restated-index'
        report.sec-url:
           $ref: '#/components/schemas/report_sec-url'
        report.sic-code:
           $ref: '#/components/schemas/report_sic-code'
        report.source-id:
           $ref: '#/components/schemas/report_source-id'
        report.source-name:
           $ref: '#/components/schemas/report_source-name'
        report.state-of-incorporation:
           $ref: '#/components/schemas/report_state-of-incorporation'
    
    results:
      type: object
      properties:
        ruleBaseVersion:
          type: string
          xml:
            attribute: true
        version:
          type: string
          xml:
              attribute: true
        schemaLocation:
          type: string
          xml:
              attribute: true
              prefix: 'xsi'
              namespace: 'http://www.w3.org/2001/XMLSchema-instance'
        submission:
          type: object
          properties:
            entity:
              type: object
              properties:
                cik:
                  type: string
                  xml:
                    attribute: true
              xml:
                prefix: 'xucc'
            info:
              type: object
              properties:
                rules-version:
                  type: string
                  xml:
                    attribute: true
                server-name:
                  type: string
                  xml:
                    attribute: true
                taxonomy-version:
                  type: string
                  xml:
                    attribute: true
                xucc-version:
                  type: string
                  xml:
                    attribute: true
              xml:
                prefix: 'xucc'
            stats:
              type: object
              properties:
                informational_count:
                  type: integer
                  xml:
                    attribute: true
                num_err:
                  type: integer
                  xml:
                    attribute: true
                num_errors:
                  type: integer
                  xml:
                    attribute: true
                num_total:
                  type: integer
                  xml:
                    attribute: true
                run_time:
                  type: integer
                  xml:
                    attribute: true
                warning_count:
                  type: integer
                  xml:
                    attribute: true
              xml:
                prefix: 'xucc'
          xml:
            prefix: 'xucc'
            
        validationMessages:
          type: object
          properties:
            severity:
              type: string
              xml:
                attribute: true
              example: 'ERRORR'
            validationMessage:
              type: object
              properties:
                severity:
                  type: string
                  xml:
                    attribute: true
                  example: "ERROR"
            
                errorCode:
                  type: string
                  xml:
                    attribute: true
                  example: "DQC.US.0001.1" 
                effectiveDate:
                  type: string
                  xml:
                    attribute: true
                  example: '2018-12-31'
                  description: Date that the rule becomes effective.
                lineNumber:
                  type: integer
                  xml:
                    attribute: true
                  example: "4734" 
                status:
                  type: string
                  xml:
                    attribute: true
                  example: "APPROVED" 
                url:
                  type: string
                  xml:
                    attribute: true
                  example: "submission:mos-20180630.xml"
                messageDetail:
                  type: string
                  example: '2019-06-06 21:01:09,359 [EFM.6.05.40.entityVoluntaryFilersUnexpected] Submission type 10-Q should not have dei:EntityVoluntaryFilers. - mos-20180630.xml 4186'
                  xml:
                    prefix: 'vm'
                ref:
                  type: object
                  properties:
                    property:
                      type: array
                      items: 
                        type: object
                        properties:
                          name:
                            type: string
                            xml:
                              attribute: true
                            example: label
                          value:
                            type: string
                            xml:
                              attribute: true
                            example: "Noncontrolling Interest, Decrease from Redemptions or Purchase of Interests"
                      xml:
                        prefix: 'vm'
                  xml:
                        prefix: 'vm'    
              xml:
                prefix: 'vm'
          xml:
            prefix: 'vm'
            namespace: 'http://www.xbrl.us/xucc/validationMessages/1.6'
      xml:
        prefix: 'xucc'
        namespace: 'http://www.xbrl.us/xucc/results/1.6'
        
      
    
    fact_details_sans_report:
      type: object
      properties:
        concept.balance-type:
          $ref: '#/components/schemas/concept_balance-type'
        concept.datatype:
           $ref: '#/components/schemas/concept_datatype'
        concept.id:
          $ref: '#/components/schemas/concept_id'
        concept.is-base:
          $ref: '#/components/schemas/concept_is-base'
        concept.is-monetary:
           $ref: '#/components/schemas/concept_is-monetary'
        concept.local-name:
          $ref: '#/components/schemas/concept_local-name'
        concept.namespace:
          $ref: '#/components/schemas/concept_namespace'
        concept.period-type:
          $ref: '#/components/schemas/concept_period-type'
        dimension.is-base:
          $ref: '#/components/schemas/dimension_is-base'
        dimensions:
          $ref: '#/components/schemas/dimensions_object'
        dimensions.count:
          $ref: '#/components/schemas/dimensions_count'
        dimensions.id:
          $ref: '#/components/schemas/dimensions_id'
        dts.entry-point:
          $ref: '#/components/schemas/dts_entry-point'
        dts.target-namespace:
          $ref: '#/components/schemas/dts_target-namespace'
        entity.name:
          $ref: '#/components/schemas/entity_name'
        entity.scheme:
          $ref: '#/components/schemas/entity_scheme'
        fact.decimals:
          $ref: '#/components/schemas/fact_decimals'
        fact.example:
          $ref: '#/components/schemas/fact_example'
        fact.has-dimensions:
          $ref: '#/components/schemas/fact_has-dimensions'
        fact.hash:
          $ref: '#/components/schemas/fact_hash'
        fact.highlighted-value:
          $ref: '#/components/schemas/fact_highlighted-value'
        fact.id:
          $ref: '#/components/schemas/fact_id'
        fact.inline-display-value:
          $ref: '#/components/schemas/fact_inline-display-value'
        fact.inline-is-hidden:
          $ref: '#/components/schemas/fact_inline-is-hidden'
        fact.inline-negated:
          $ref: '#/components/schemas/fact_inline-negated'
        fact.inline-scale:
          $ref: '#/components/schemas/fact_inline-scale'
        fact.is-extended:
          $ref: '#/components/schemas/fact_is-extended'
        fact.numerical-value:
          $ref: '#/components/schemas/fact_numerical-value'
        fact.ultimus:
          $ref: '#/components/schemas/fact_ultimus'
        fact.ultimus-index:
          $ref: '#/components/schemas/fact_ultimus-index'
        fact.value:
          $ref: '#/components/schemas/fact_value'
        fact.value-link:
          $ref: '#/components/schemas/fact_value-link'
        fact.xml-id:
          $ref: '#/components/schemas/fact_xml-id'
        member.is-base:
          $ref: '#/components/schemas/member_is-base'
        period.calendar-period:
          $ref: '#/components/schemas/period_calendar-period'
        period.end:
          $ref: '#/components/schemas/period_end'
        period.fiscal-id:
          $ref: '#/components/schemas/period_fiscal-id'
        period.fiscal-period:
          $ref: '#/components/schemas/period_fiscal-period'
        period.fiscal-year:
          $ref: '#/components/schemas/period_fiscal-year'
        period.id:
          $ref: '#/components/schemas/period_id'
        period.instant:
          $ref: '#/components/schemas/period_instant'
        period.start:
          $ref: '#/components/schemas/period_start'
        period.year:
          $ref: '#/components/schemas/period_year'
        unit:
          $ref: '#/components/schemas/unit'
        unit.denominator:
          $ref: '#/components/schemas/unit_denominator'
        unit.numerator:
          $ref: '#/components/schemas/unit_numerator'
        unit.qname:
          $ref: '#/components/schemas/unit_qname'
      
    report_details_with_facts:
      type: object
      properties:
        dts.id:
          $ref: '#/components/schemas/dts_id'
        entity.cik:
          $ref: '#/components/schemas/entity_cik'
        entity.id:
          $ref: '#/components/schemas/entity_id'
        entity.ticker:
          $ref: '#/components/schemas/entity_ticker'
        report.accession:
          $ref: '#/components/schemas/report_accession'
        report.address:
          $ref: '#/components/schemas/report_address'
        report.base-taxonomy:
          $ref: '#/components/schemas/report_base-taxonomy'
        report.checks-run:
           $ref: '#/components/schemas/report_checks-run'
        report.creation-software:
           $ref: '#/components/schemas/report_creation-software'
        report.document-type:
           $ref: '#/components/schemas/report_document-type'
        report.entity-name:
           $ref: '#/components/schemas/report_entity-name'
        report.entry-type:
           $ref: '#/components/schemas/report_entry-type'
        report.entry-url:
           $ref: '#/components/schemas/report_entry-url'
        report.filer-category:
           $ref: '#/components/schemas/report_filer-category'
        report.filing-date:
           $ref: '#/components/schemas/report_filing-date'
        report.id:
           $ref: '#/components/schemas/report_id'
        report.is-most-current:
           $ref: '#/components/schemas/report_is-most-current'
        report.period-end:
           $ref: '#/components/schemas/report_period-end'
        report.period-index:
           $ref: '#/components/schemas/report_period-index'
        report.phone:
           $ref: '#/components/schemas/report_phone'
        report.restated:
           $ref: '#/components/schemas/report_restated'
        report.restated-index:
           $ref: '#/components/schemas/report_restated-index'
        report.sec-url:
           $ref: '#/components/schemas/report_sec-url'
        report.sic-code:
           $ref: '#/components/schemas/report_sic-code'
        report.source-id:
           $ref: '#/components/schemas/report_source-id'
        report.source-name:
           $ref: '#/components/schemas/report_source-name'
        report.state-of-incorporation:
           $ref: '#/components/schemas/report_state-of-incorporation'
        fact:
          type: object
          properties:
            paging:
              $ref: '#/components/schemas/paging'
            data:
              type: array
              items:
                $ref: '#/components/schemas/fact_details_sans_report'
    concept_details: 
      type: object
      properties:
        concept.balance-type:
          $ref: '#/components/schemas/concept_balance-type'
        concept.datatype:
          $ref: '#/components/schemas/concept_datatype'
        concept.id:
          $ref: '#/components/schemas/concept_id'
        concept.is-abstract:
          $ref: '#/components/schemas/concept_is-abstract'
        concept.is-base:
          $ref: '#/components/schemas/concept_is-base'
        concept.is-monetary:
           $ref: '#/components/schemas/concept_is-monetary'
        concept.is-nillable:
           $ref: '#/components/schemas/concept_is-nillable'
        concept.is-numeric:
           $ref: '#/components/schemas/concept_is-numeric'
        concept.local-name:
          $ref: '#/components/schemas/concept_local-name'
        concept.namespace:
          $ref: '#/components/schemas/concept_namespace'
        concept.period-type:
          $ref: '#/components/schemas/concept_period-type'
        concept.substitution:
          $ref: '#/components/schemas/concept_substitution'
        dts.entry-point:
          $ref: '#/components/schemas/dts_entry-point'
        dts.hash:
          $ref: '#/components/schemas/dts_hash'
        dts.id:
          $ref: '#/components/schemas/dts_id'
        dts.target-namespace:
          $ref: '#/components/schemas/dts_target-namespace'
        label:
          $ref: '#/components/schemas/label_object'
        reference:
          $ref: '#/components/schemas/reference_object'
    dts_details: 
      type: object
      properties:
        dts.entity-name:
          $ref: '#/components/schemas/dts_entity-name'
        dts.entry-point:
          $ref: '#/components/schemas/dts_entry-point'
        dts.hash:
          $ref: '#/components/schemas/dts_hash'
        dts.id:
          $ref: '#/components/schemas/dts_id'
        dts.taxonomy:
          $ref: '#/components/schemas/dts_taxonomy'
        dts.taxonomy-name:
          $ref: '#/components/schemas/dts_taxonomy-name'
        dts.version:
          $ref: '#/components/schemas/dts_version'
        report.accession:
          $ref: '#/components/schemas/report_accession'
        report.id:
          $ref: '#/components/schemas/report_id'
        
  # This is where all the field properties are defined
    assertion_code:
        type: string
        description: Unique code associated with a specific error.
        example: DQC.US.0073.7648
    assertion_detail:
        type: string
        description: Message details for the error.
        example: 'The concept us-gaap:DefinedBenefitPlanBenefitObligation with a value of 835,000,000 is ....'
    assertion_effective_date:
        type: string
        format: date
        description: Effective date of the rule. This is the date that the rule went into effect and all companies were required to follow the rule.
        example: '2018-12-31'
    assertion_rule_focus:
        type: string
        description: Details of fact(s) impacted by the error.
    assertion_run-date:
        type: string
        format: Date
        description: Date that the rule was run on the filing.
    assertion_severity:
        type: string
        description: Severity of the rule indicated as error, warning or information.
        example: error
    assertion_source:
        type: string
        description: The source of rule base that generated the rule, indicated as DQC, EFM, or xbrlus-cc.
    assertion_type:
        type: string
        description: The classification of the rule.
    
    concept_balance-type:
        type: integer
        description: The balance type of a concept. This can be either debit, credit or not defined.
    concept_datatype:
      type: string
      description: The datatype of the concept such as monetary or string.
      example: monetaryItemType
    concept_id:
      type: integer
      description: A unique integer for a concept that can be searched. This is a faster way to retrieve the details of a fact, however it is namespace specific and will only search for the use of a concept for a specific schema.
      example: 16261
    concept_is-abstract:
      type: boolean
      description: Identifies if the concept is an abstract concept. If a primary concept is an abstract (not an axis or dimension) it cannot have a value associated with it.
      example: true
    concept_is-base:
      type: boolean
      description: Identifies if the concept is from a base published taxonomy (ie. US GAAP, IFRS) or from a company extension. A value of true indicates that it is a base taxonomy element. This attribute can be used to find extension elements in a filing.
      example: true
    concept_is-monetary:
      type: boolean
      description: Identifies if the concept is a monetary value when the attribute is true. A monetary value is differs from a numeric concept because it has a currency associated with it.
      example: true
    concept_is-nillable:
      type: boolean
      description: Identifies whether the concept can have a nill value.
      example: true
    concept_is-numeric:
      type: boolean
      description: Identifies whether the concept is a numeric value when the attribute is true.
      example: true
    concept_local-name:
      type: string
      description: The concept name in the base schema of a taxonomy excluding the namespace, such as Assets or Liabilities. Use this to search across multiple taxonomies where the local name is known to be consistent over time.
      example: Assets
    concept_namespace:
      type: string
      description: The namespace of the concept used to identify a fact.
    concept_period-type:
      type: integer
      description: The period type of the concept. This can be either duration or instant.
      example: duration
    concept_substitution:
      type: string
      description: The substitution group of the concept.
      example: xbrl:item
    
    dimension_is-base:
      type: boolean
      description: A boolean value that indicates if the dimension (aspect) is a base element in the reporting taxonomy or a company extension.
    dimension_local-name:
      type: string
      description: Local name of the dimension used with the fact.
    dimension_namespace:
      type: string
      description: Namespace of the dimension used with the fact.
    dimensions_object:
      type: array
      description: Returns an array of dimensions associated with the given fact.
      items:
        $ref: '#/components/schemas/dimensions'
    dimensions_count:
      type: integer
      description: The number of dimensional qualifiers associated with a given fact. A comma-delimited list will return facts with 0, 1, 2 etc. dimensions.
    dimensions_id:
      type: string
      description: ID of the dimension.
    
    document_example:
      type: string
      description: Excerpt of the document where text string search using document.text-search matched the request.
    document_highlighted-value:
      type: string
      description: Complete document containing highlighted indication of document.text-search result (search result appears in bold blue font).
    document_top-level:
      type: boolean
      description: Boolean that indicates if the file in a DTS is the entry point.
      example: true
    document_tree-level:
      type: integer
      description: Level of the files in terms of which files import or reference child files.
      example: 2
    document_tree-order:
      type: integer
      description: Order of the files in terms of how the DTS is compiled from the underlying documents.
      example: 2      
    document_type:
      type: string
      description: Indicates if the document is a schema, linkbase or instance.
      example: 'inline'
    document_uri:
      type: string
      format: uri
      description: The URL at which the document comprising the DTS is located.
      example: 'http://www.sec.gov/Archives/edgar/data/46619/000004661918000117/hei1031201810k.htm'
    
    dts_content:
      type: string
      description: Contents of the document
      example: 'Contents of the file contains .....'
    dts_entity-name:
      type: string
      description: The name of the entity that the DTS is applicable to. If the DTS is non company specific this value is null.
      example: Apple Inc.
    dts_entry-point:
      type: string
      description: The URL entry point of a discoverable taxonomy set. This is also referred to as the entry point for a taxonomy. A taxonomy can have multiple entry points and the resulting set of taxonomies of using an entry point is called a DTS.
      example: http://xbrl.fasb.org/us-gaap/2017/entire/us-gaap-entryPoint-all-2017-01-31.xsd
    dts_hash:
      type: string
      description: The DTS identifier for a given group of taxonomies as a hex hash. XBRL facts and linkbases are typically associated with a given report that is asscociated with a DTS.
      example: \\xb46b615601cd46644a3de5f91adeca28462bcde252b1d7d1d970b011
    dts_id:
      type: integer
      description:  A unique integer as a DTS identifier for a given group of taxonomies. XBRL facts and linkbases are typically associated with a given report that is asscociated with a DTS.
      example: 1
    dts_taxonomy:
      type: string
      description: The taxonomy group that the taxonomy belongs to, such as US GAAP or IFRS.
      example: US GAAP
    dts_taxonomy-name:
      type: string
      description: The specific taxonomy name such as `US GAAP 2019` or `IFRS 2019`.
      example: US GAAP 2019
    dts_target-namespace:
      type: string
      description: The target namespace of a discoverable taxonomy set (DTS).
    dts_version:
      type: string
      description: The specific taxonomy version name such as `2019` for US GAAP.
      example: 2019.
      
    entity_cik:
      type: string
      description: The CIK is the SEC identifier used to identify a reporting entity. This is the CIK associated with a given fact, DTS or report.
      example: "0001000045"
    entity_id:
      type: integer
      description: The internal identifier used to identify an entity. This will be replaced with the LEI when the SEC supports the LEI standard.
      example: 1
    entity_name:
      type: string
      description: The name of the entity reporting.
    entity_scheme:
      type: string
      description: The scheme of the identifier associated with a fact, report or DTS. A fact could have multiple entity identifiers and this indicates the identifier that was used.
      example: http://www.sec.gov/CIK
    entity_ticker:
      type: string
      description: The stock exchange ticker of the entity filing the report. Although a company may have multiple tickers this returns a single value.
      example: nick
    
    fact_decimals:
      type: string
      description: The decimal value associated with a fact. This can be either a number representing decimal places or be infinite. There are two values returned for this field the first is a decimal and the second is a boolean. The first indicates the decimal places if applicable and the second identifies if the value is infinite(T) or not (F).
    fact_example:
      type: string
      description: Excerpt of the fact value where text string search using fact.text-search matched the request.
    fact_has-dimensions:
      type: boolean
      description: This boolean field indicates if the fact has any dimensions associated with it.
    fact_hash:
      type: string
      description: The fact hash is derived from the aspect properties of the fact. Each fact will have a different hash in a given report. Over time however, different facts may have the same hash if they are identical. The hash does not take into account the value reported for the fact. The fact hash is used to determine the ultimus index. By searching on the hash you can identify all identical facts that were reported.
    fact_highlighted-value:
      type: string
      description: Full fact value containing highlighted indication of fact.text-search result (search result appears in bold blue font).
    fact_id:
      type: integer
      description: The internal identifier used to identify a fact.
    fact_inline-display-value:
      type: string
      description: Value actually displayed in the inline document.
    fact_inline-is-hidden:
      type: boolean
      description: Boolean that indicates if the fact was hidden in the inline document.
    fact_inline-negated:
      type: boolean
      description: Boolean that indicates if the fact was negated in the inline document.
    fact_inline-scale:
      type: integer
      description: Integer that indicates the scale used on the fact in the inline document.
      example: 3
    fact_is-extended:
      type: boolean
      description: This indicates if the fact is comprised of either an extension concept, extension axis or extension member.
    fact_numerical-value:
      type: number
      description: The numerical value of the reported fact.
    fact_ultimus:
      type: boolean
      description: A boolean that indicates if the fact is the latest value reported.  A value of true represents the latest value reported.  A value of false represents that the value has been superceded with a more recent fact. If requesting values from a specific report, the ultimus should not be used as a search parameter, as all the fact values will not be returned if a subsequent report has been filed in which the fact appears.
    fact_ultimus-index:
      type: integer
      description: An integer that records the incarnation of the fact. The same fact may be reported many times and the ultimus field represents the reverse order of incarnation for the fact's reporting. A value of 1 indicates that this is the latest value of the fact. A value of 6 for example would indicate that the value has been reported 6 times subsquent to the fact's most-recent reporting. If requesting values from a specific report, the ultimus index should not be used as a search parameter, as all the fact values will not be returned if a subsequent report has been filed in which the fact appears.
    fact_value:
      type: string
      description: The value of the fact as a text value. This includes numerical as well as non-numerical values reported.
    fact_value-link:
      type: string
      description: A URL to the rendered fact.value data. For data encoded as HTML (ie. text block disclosures), the URL will display the formatted data excerpted from the full report.
    fact_xml-id:
      type: string
      description: The xml-id included in the filing. Not all facts will have this identifier, as it is dependent ofn the filer adding it. Where it is used (in inline filings, for example), it can be used to locate the fact value in the filing.
    
    label_object:
      type: object
      properties:
        paging:
          $ref: '#/components/schemas/paging'
        data:
          type: array
          items:
            $ref: '#/components/schemas/label_details' 
      description: Label object that defines the details associated with a label.
    label_details:
      type: object
      properties:
        label.id:
          type: string
        label.lang:
          type: string
          example: en-US
        label.role:
          type: string
          format: uri
          example: http://www.xbrl.org/2003/role/label
        label.role-short:
          type: string
          example: label
        label.text:
          type: string
          example: Assets
    label_details_search:
      allOf:
        - type: object
          properties:
            concept.id:
              $ref: '#/components/schemas/concept_id'
            concept.local-name:
              $ref: '#/components/schemas/concept_local-name'
            concept.namespace:
              $ref: '#/components/schemas/concept_namespace'
            dts.id:
              $ref: '#/components/schemas/dts_id'
            dts.entry-point:
              $ref: '#/components/schemas/dts_entry-point'
        - $ref:  '#/components/schemas/label_details'
        
    member_is-base:
      type: boolean
      description: A boolean value that indicates if the member is a base element in the reporting taxonomy or a company extension.
    member_local-name:
      type: string
      description: Local name of the member.
    member_typed-value:
      type: string
      description: Typed value of the member.
    member_member-value:
      type: string
      description: Typed value of the member.
    member_namespace:
      type: string
      description:  Namespace of the member.
      
    network_arcrole-uri:
      type: string
      format: uri
      description: URI that identifies the link types, such as parent-child. However, this is the full URI of http://www.xbrl.org/2003/arcrole/parent-child.
      example: http://www.xbrl.org/2003/arcrole/parent-child
    
    
    network_id:
      type: integer
      description: Unique internal identifier used to identify a specific network. A different identifier is used for networks with the same role but different linkbase types.
    network_link-name:
      type: string
      description: Name that identifies the link type. This corresponds to a linkbase i.e. presentationLink, calculationLink, definitionLink.
      example: presentationLink
    network_role-description:
      type: string
      description: Readable name or description of the header.
      example: 40201 - Disclosure - Balance Sheet Components (Details)
    network_role-uri:
      type: string
      format: uri
      description: The URI of the network role. This would appear as a URI describing the reporting group i.e. http://www.bc.com/role/DisclosureBalanceSheetComponentsDetails.
      example: http://www.bc.com/role/DisclosureBalanceSheetComponentsDetails

    cube_drs_role-uri:
      type: string
      format: uri
      description: The URI of the drs role. This would appear as a URI describing the reporting group that includes a cube i.e. http://ferc.gov/form/2020-01-01/roles/Schedule/F714/IdentificationAndCertification.
      example: http://www.bc.com/role/DisclosureBalanceSheetComponentsDetails

    cube_id:
      type: integer
      description: Unique internal identifier used to identify a specific cube. A different identifier is used for each combination of hypercube element and drs role.

    cube.typed-domain-element-name:
      type: string
      description: Unique identifier that represents a typed dimension member.
      
    parts_object:
      type: object
      properties:
        paging:
          $ref: '#/components/schemas/paging'
        data:
          type: array
          items:
            $ref: '#/components/schemas/parts_details' 
      description: Parts object that defines the details associated with a part.
    parts_details:
      type: object
      properties:
        parts.local-name:
          type: string
          example: TaxonomyVersion
        parts.namespace:
          type: string
          format: uri
          example: http://fasb.org/cn-part/2019-01-31
        parts.order:
          type: integer
          description: order assigned to the part.
        parts.part-value:
          type: string
          description: Value assigned to the part.
          example: "US GAAP 2018"
        reference.id:
          type: string
    
    period_calendar-period:
      type: string
      description: The period identifier for the fact such as year(Y) quarters such as (Q1,Q2,Q3,Q4), cumulative quarters such as 3QCUM, and half years such as H1 and H2. The calendar period aligns the periods with a calendar year. A company with a year end of 30 September would have a fiscal 4th quarter which would be a calendar quarter of Q3.
    period_end:
      type: string
      format: date
      description: Period end date of the fact, if applicable.
    period_fiscal-id:
      type: string
      description: The identifier of the fiscal period. Each period has an assigned hash which identifies the fiscal period. The hash can be used to search for periods that are identical. Periods with the same period and year in fact may be different as the fiscal periods and years are approximations. The logic applied in the API is that if a fact is more than 15 days into a year beginning January 1, the fact is in the same fiscal year as the year beginning January 1.
    period_fiscal-period:
      type: string
      description: The period identifier for the fact such as year(Y) quarters such as (Q1,Q2,Q3,Q4), cumulative quarters such as 3QCUM, and half years such as H1 and H2. The fiscal period aligns the periods with a fiscal year. A company with a year end of 30 September would have a fiscal 4th quarter which would be a fiscal quarter of Q4 and a calander quarter of Q3.
    period_fiscal-year:
      type: integer
      description: The fiscal year in which the fact is applicable in the format 'YYYY'.
      maxLength: 4
      minLength: 4
    period_id:
      type: string
      description: The identifier of the calander period. Each period has an assigned hash which identifies the period. The hash can be used to search for periods that are identical. Periods with the same period and year in fact may be different as the fiscal period is an approximation.
    period_instant:
      type: string
      format: date
      description: Instant in time at which the fact was measured. This is only applicable for facts with a period type of instant.
    period_start:
      type: string
      format: date
      description: Period start date of the fact, if applicable.
      example: "2018-01-01"
    period_year:
      type: integer
      description: The calendar year in which the fact is applicable in the format 'YYYY'.
      maxLength: 4
      minLength: 4
      example: 2018
      
    reference_object:
      type: object
      properties:
        paging:
          $ref: '#/components/schemas/paging'
        data:
          type: array
          items:
            $ref: '#/components/schemas/reference_details' 
      description: Reference object that defines the details associated with a reference.
    reference_concept_details:
      allOf:
        - type: object
          properties:
            concept.id:
              $ref: '#/components/schemas/concept_id'
            concept.local-name:
              $ref: '#/components/schemas/concept_local-name'
            concept.namespace:
              $ref: '#/components/schemas/concept_namespace'
            dts.id:
              $ref: '#/components/schemas/dts_id'
            dts.entry-point:
              $ref: '#/components/schemas/dts_entry-point'
        - $ref: '#/components/schemas/reference_details'
      description: Reference object that defines the details associated with a reference.
    reference_details:
      type: object
      properties:
        reference.id:
          type: string
        reference.role:
          type: string
          format: uri
          example: http://fasb.org/us-gaap/role/ref/legacyRef
        reference.role-definition:
          type: string
          example: Legacy reference
        reference.role-short:
          type: string
          example: legacyRef
        parts:
          $ref: '#/components/schemas/parts_object'
    
    relationship_details_search:
      allOf:
        - type: object
          properties:
            dts.id:
              $ref: '#/components/schemas/dts_id'
            network.arcrole-uri:
              $ref: '#/components/schemas/network_arcrole-uri'
            network.id:
              $ref: '#/components/schemas/network_id'
            network.link-name:
              $ref: '#/components/schemas/network_link-name'
            network.role-description:
              $ref: '#/components/schemas/network_role-description'
            network.role-uri:
              $ref: '#/components/schemas/network_role-uri'
        - $ref:  '#/components/schemas/relationship_details'
    relationship_id:
      type: integer
      description: An internal identifier associated with the relationship.
    relationship_order:
      type: integer
      description: The order of the relationships relative to each other.
    relationship_preferred-label:
      type: string
      description: The preferred label attribute value associated with a relationship.
    relationship_source-concept-id:
      type: integer
      description: The unique identifier for the concept that is the basis of the relationship.
    relationship_source-is-abstract:
      type: boolean
      description: The abstract indicator (boolean) of the concept that is the basis of the relationship.
    relationship_source-name:
      type: string
      description: The name of the concept that is the basis of the relationship.
    relationship_source-namespace:
      type: string
      format: uri
      description: The namespace of the concept that is the basis of the relationship.
    relationship_target-concept-id:
      type: integer
      description: The unique identifier for the concept under the source relationship.
    relationship_target-datatype:
      type: string
      description: The datatype of the concept under the source relationship.
      example: monetaryItemType
    relationship_target-is-abstract:
      type: boolean
      description: The abstract indicator (boolean) of the concept under the source relationship.
      example: false
    relationship_target-name:
      type: string
      description: The name of the concept under the source relationship.
      example: CommitmentsAndContingencies
    relationship_target-namespace:
      type: string
      format: uri
      description: The namespace of the concept under the source relationship.
      example: http://fasb.org/us-gaap/2016-01-31
    relationship_tree-depth:
      type: integer
      description: When viewed as a tree, the value represents the number of positions from the root node of the relationship.
      example: 3
    relationship_tree-sequence:
      type: integer
      description: The order in which the relationship appears in the entire network.
    relationship_weight:
      type: integer
      description: The calculation weight attribute value associated with a relationship..
    relationship_details:    
      type: object 
      properties:  
        relationship.id:
           $ref: '#/components/schemas/relationship_id'
        relationship.order:
          $ref: '#/components/schemas/relationship_order'
        relationship.preferred-label:
          $ref: '#/components/schemas/relationship_preferred-label'
        relationship.source-concept-id:
          $ref: '#/components/schemas/relationship_source-concept-id'
        relationship.source-is-abstract:
          $ref: '#/components/schemas/relationship_source-is-abstract'
        relationship.source-name:
           $ref: '#/components/schemas/relationship_source-name'
        relationship.source-namespace:
          $ref: '#/components/schemas/relationship_source-namespace'
        relationship.target-concept-id:
          $ref: '#/components/schemas/relationship_target-concept-id'
        relationship.target-datatype:
          $ref: '#/components/schemas/relationship_target-datatype'
        relationship.target-is-abstract:
          $ref: '#/components/schemas/relationship_target-is-abstract'
        relationship.target-name:
          $ref: '#/components/schemas/relationship_target-name'
        relationship.target-namespace:
          $ref: '#/components/schemas/relationship_target-namespace'
        relationship.tree-depth:
          $ref: '#/components/schemas/relationship_tree-depth'
        relationship.tree-sequence:
          $ref: '#/components/schemas/relationship_tree-sequence'
        relationship.weight:       
          $ref: '#/components/schemas/relationship_weight'
    
    report_accession:
      type: string
      description: The unique identifier (inclusive of the entity CIK) used by the SEC for a report.
      example: 0001193125-11-216128
    report_accepted-timestamp:
      type: string
      format: date
      description: Date that the report was accepted.
    report_address:
      type: string
      description: Physical address of the reporting entity.
      example: 2454 MCMULLEN BOOTH RD, BLDG C SUITE 501 B, CLEARWATER FL 33759
    report_base-taxonomy:
      type: string
      description: Base taxonomy used for the filing. e.g. US-GAAP
      example: US GAAP 2011
    report_checks-run:
       type: boolean
       description: Indicates if the Data Quality Committee checks (see assertion object details - dqcfiling) have run for this report.
       example: true
    report_creation-software:
       type: string
       description: The creation software that was used to create a report.
       example: XBRL document created with Ez-XBRL version 3.0.1.2
    report_document-type:
       type: string
       description: The document type of the report e.g. 10-K, 10-Q, etc.
       example: 10-Q   
    report_entity-name:
       type: string
       description: The name of the entity submitting the report.
       example: NICHOLAS FINANCIAL INC
    report_entry-type:
       type: string
       description: The entry type of the report. This could be instance or inline.
       example: instance
    report_entry-url:
       type: string
       description: The URL entry point of a discoverable taxonomy set. This is also referred to as the entry point for a taxonomy. This represents the DTS entry point for a specific report.
       example: http://www.sec.gov/Archives/edgar/data/1000045/000119312511216128/nick-20110630.xml
    report_filer-category:
       type: string
       description: Filer category of the report.  
       example: Accelerated Filer
    report_filing-date:
       type: string
       format: date
       description: The date that the report was filed with the regulator.
       example: "2011-08-09" 
    report_id:
       type: integer
       description: The internal identifier assigned to a report.
       example: 1234
    report_is-most-current:
       type: boolean
       description: A boolean indicator for whether the report is the most current (true).
       example: true
    report_period-end:
       type: string
       description: The period end date or balance date associated with a given report.    
    report_period-index:
       type: string
       description: Allows the retrieval of reports other than most current. A value of 1 gets the latest report_ A value of 2 gets the second to last report etc.
    report_phone:
       type: string
       description: The phone number of the submitter of the report.
    report_restated:
       type: boolean
       description: A boolean that indicates if the report has been subsequently restated.  A value of true represents that the report has been subsequently restated by another report.  A value of false means that this report has not been subsequently restated by another report.
    report_restated-index:
       type: integer
       description: A numerical indicator that can be used to identify if a report has been restated. If the value is 1 it indicates that this is the latest report. If the value is 2 it means that an updated copy of the report has been filed.
    report_sec-url:
       type: string
       description: The URL at which the details of a filing can be accessed from the SEC EDGAR system.
    report_sic-code:
       type: string
       description: Integer that representsthe Standard Industrial Classification (SIC) code used by the SEC in the United States.
    report_source-id:
       type: integer
       description: ID of the filing program.
    report_source-name:
       type: string
       description: Name of the source of the data such as SEC.
    report_state-of-incorporation:
       type: string
       description: The state of incorporation for the entity submitting the report.
    
    unit:
      type: string
      description: The unit of measure associated with the fact, such as USD.
      example: USD
    unit_denominator:
      type: string
      description: The unit of measure used as the denominator for a fact.
    unit_numerator:
      type: string
      description: The unit of measure used as the numerator for a fact.
    unit_qname:
      type: string
      description: The full qname of the unit of measure, includes the namespace of the unit in clark notation.
      example: '{http://www.xbrl.org/2003/iso4217}USD'

  parameters:
    assertion.code_Param:
        in: query
        name: assertion.code
        schema:
          type: string
        description: Unique code associated with a specific error.
    assertion.severity_Param:
        in: query
        name: assertion.severity
        schema:
          type: string
        description: Severity of the rule, indicated as error, warning or information.
    assertion.source_Param:
        in: query
        name: assertion.source
        schema:
          type: string
        description: The source of rule base that generated the rule, indicated as DQC, EFM, or xbrlus-cc.
    assertion.type_Param:
        in: query
        name: assertion.type
        schema:
          type: string
        description: The classification of the rule.

    concept.id_Param:         # Can be referenced via '#/components/parameters/concept-id_Param'
          in: query
          name: concept.id
          schema:
            type: integer
          description: A unique integer for a concept that can be searched. This is a faster way to retrieve the details of a fact, however it is namespace specific and will only search for the use of a concept for a specific schema.
    concept.is-base_Param:     
          in: query
          name: concept.is-base
          schema:
            type: boolean
            description: Identifies if the concept is from a base published taxonomy (ie. US GAAP, IFRS) or from a company extension. A value of true indicates that it is a base taxonomy element. This attribute can be used to find extension elements in a filing.
    concept.is-monetary_Param:    
          in: query
          name: concept.is-monetary
          schema:
            type: boolean
            description: Identifies if the concept is a monetary value when the attribute is true. A monetary value is differs from a numeric concept because it has a currency associated with it.
    concept.local-name_Param:       
          in: query
          name: concept.local-name
          style: form
          explode: false
          schema:
            type: array
            items:
              type: string
          description: The concept name in the base schema of a taxonomy exluding the namespace, such as Assets or Liabilities. Use this to search across multiple taxonomies where the local name is known to be consistent over time.

    concept.namespace_Param:     
          in: query
          name: concept.namespace
          schema:
            type: string
          description: The namespace of the concept used to identify a fact.

    cube.default-local-name_Param:
          in: query
          name: cube.default-local-name
          style: form
          explode: false
          schema:
            type: array
            items:
              type: string
          description: The concept name representing the default value of an axis. Use this to search across multiple taxonomies where the local name is known to be consistent over time.

    cube.dimension-local-name_Param:
          in: query
          name: cube.dimension-local-name
          style: form
          explode: false
          schema:
            type: array
            items:
              type: string
          description: The concept name representing the concept name of an axis. Use this to search across multiple taxonomies where the local name is known to be consistent over time.

    cube.drs-role-uri_Param:
          in: query
          name: cube.drs-role-uri
          schema:
            type: string
            format: uri
          description: The URI of the dimension role. This would appear as a URI describing the reporting dimension group i.e. http://www.bc.com/role/DisclosureBalanceSheetComponentsDetails.
          example: http://www.bc.com/role/DisclosureBalanceSheetComponentsDetails

    cube.id_Param:
          in: query
          name: cube.id
          style: form
          explode: false
          schema:
            type: array
            items:
              type: integer
          description: The identifier used to identify a cube.

    cube.is-domain_Param:
          in: query
          name: cube.is-domain
          schema:
            type: boolean
          description: A boolean value that indicates if the member is the domain member.

    cube.is-explicit_Param:
          in: query
          name: cube.is-explicit
          schema:
            type: boolean
          description: A boolean value that indicates if the dimension is an explicit dimension.

    cube.member-local-name_Param:
          in: query
          name: cube.member-local-name
          style: form
          explode: false
          schema:
            type: array
            items:
              type: string
          description: The concept name representing the concept name of a member on an axis. Use this to search across multiple taxonomies where the local name is known to be consistent over time. This will appear for every cube it appears in.

    cube.member-tree-depth_Param:
      in: query
      name: cube.member-tree-depth
      schema:
          type: integer
      description: When viewed as a tree, the value represents the number of positions the member concept is from the root node of the relationship.

    cube.member-tree-sequence_Param:
      in: query
      name: cube.member-tree-sequence
      schema:
          type: integer
      description: The order in which the member concept appears in the entire network.

    cube.primary_local_name_Param:
          in: query
          name: cube.primary-local-name
          style: form
          explode: false
          schema:
            type: array
            items:
              type: string
          description: The concept name representing the primary concept name of a table. Use this to search across multiple taxonomies where the local name is known to be consistent over time. This will appear for every cube it appears in.

    cube.primary_namespace_Param:     
          in: query
          name: cube.primary-namespace
          schema:
            type: string
          description: The namespace of the table concept used to identify a fact.

    cube.tree-depth_Param:
      in: query
      name: cube.tree-depth
      schema:
          type: integer
      description: When viewed as a tree, the value represents the number of positions the member concept is from the root node of the relationship.

    cube.tree-sequence_Param:
      in: query
      name: cube.tree-sequence
      schema:
          type: integer
      description: The order in which the member concept appears in the entire network.

    cube.table-local-name_Param:
        in: query
        name: cube.table-local-name
        style: form
        explode: false
        schema:
          type: array
          items:
            type: string
        description: The concept name representing the concept name of the table. Use this to search across multiple taxonomies where the local name is known to be consistent over time. This will appear for every cube it appears in.

    cube.table-namespace_Param:     
          in: query
          name: cube.table-namespace
          schema:
            type: string
          description: The namespace of the table concept used to identify a fact.


    dimension.is-base_Param:
          in: query
          name: dimension.is-base
          schema:
            type: boolean
          description: A boolean value that indicates if the dimension (aspect) is a base element in the reporting taxonomy or a company extension.
    dimension.local-name_Param:
          in: query
          name: dimension.local-name
          style: form
          explode: false
          schema:
            type: array
            items:
              type: string
          description: Local name of the dimension used with the fact.
    dimension.namespace_Param:
          in: query
          name: dimension.namespace
          schema:
            type: string
          description: Namespace of the dimension used with the fact.
    dimensions.count_Param:
          in: query
          name: dimensions.count
          style: form
          explode: false
          schema:
            type: array
            items:
              type: integer
          description: The number of dimensional qualifiers associated with a given fact. A comma-delimited list will return facts with 0, 1, 2 etc. dimensions.
    dimensions.id_Param:
       in: query
       name: dimensions.id
       schema:
          type: string
       description: ID of the dimension.

    document.text-search_Param:
       in: query
       name: document.text-search
       schema:
          type: string
       description: | 
              Search for strings within document object (ie. to locate a specific name, topic or reference within an entire document). Fields returned include document.example and document.highlighted-vaule 
              
              The XBRL API uses the Sphinx search engine to identify text. This powerful search engine quickly identifies a given text string. Sphinx is enabled to support stemming, which means it will also return plurals of a noun i.e. ipad will also return ipads. It will also return the present, future and past form of a verb for example the word kill will also return killed and killing. To match the word exactly the character "=" can be placed in front of the word i.e. = ipad will return the occurrence of the word ipad only.
              
              The Sphinx search characters that can be used are summarized in the table below:

              | Operator Name | Symbol | Example |
              | ------- | ------- | ------- | 
              | OR operator  | &#124; | Tsunami &#124; Earthquake will return text that contain either Earthquake or Tsunami. |
              | AND Operator	| & |	Tsunami & Earthquake will return text that contains both Tsunami and Earthquake. If you leave a space between 2 words it is assumed to represent an &. i.e. Tsunami Japan |
              | NOT Operator	| ! | To exclude words from a text search use the operator !. For example Tsunami & Japan &! Earthquake will return strings that contain Tsunami and Japan but not earthquake. |
              | Exact Match Operator | "text here" | Use quotes to match an exact sentence for example "the ultimate effect that the Tsunami" will return the exact sentence match. |
              | Parenthesis	| () |	Use Parenthesis to group search logic. (Assets & Liabilities) &! retirement will return text that contain both Assets and Liabilities but excluding retirement. |
              | Equal (no stemming)	| = |	Use = in front of a word to stop stemming. i.e. kill will return kill, killed, kills and killing. =kill will return kill. |
              | Word Proximity	| NEAR/n |	Use the key word NEAR with an integer to identify closeness of words. i.e. Tsunami NEAR/3 Japan will return those occurrences where Tsunami and Japan are within three words of each other. i.e. "Tsunami in Japan", "Japan earthquake and tsunami" but not "Japan earthquake and large tsunami" |
              | Sentence Restriction	| SENTENCE	| Use the key word SENTENCE to identify where words are in the same sentence. i.e. Japan SENTENCE tsunami to return where these 2 words are in the same sentence. |
              | Paragraph Restriction	| PARAGRAPH	| Use the key word PARAGRAPH to identify where words are in the same paragraph. i.e. Japan PARAGRAPH tsunami to return where these 2 words are in the same paragraph. |         
              | Quorum matching	| "text here"/n	| Use an integer after a text string to match the number of words defined after the forward slash. i.e. "Japan earthquake tsunami"/2 will return those strings where any 2 of the 3 words listed occurr i.e. Japan and Earthquake, Japan and Tsunami, earthquake and Tsunami. |             
              | Order	| << |	To return those strings only where words appear in a certain 2 less than signs are used. For example Japan << earthquake << tsunami will return a string where all three words appear in this order. such as "occurred in Japan. The earthquake was followed by a tsunami which" |             
              | Proximity Search	| "text here"~n	| Use ~n after a text string to identify where the search words all appear in a sequence of n words. For example "Japan earthquake tsunami"~10 will return those strings where the 3 words appear within a sequence of 10 words i.e. Japan Tsunami and Earthquake, Japan's earthquake shook the town and was destroyed by Tsunami, would both be returned as all 3 words appear in a sequence of less than 10 words. |

    document.top-level_Param:
      in: query
      name: document.top-level
      schema:
          type: boolean
      description: Boolean that indicates if the file in a DTS is the entry point.
    document.uri_Param:
      in: query
      name: document.uri
      schema:
          type: boolean
      description: The URL at which the document comprising the DTS is located.

    dts.entry-point_Param:
       in: query
       name: dts.entry-point
       schema:
          type: string
       description: The URL entry point of a discoverable taxonomy set. This is also referred to as the entry point for a taxonomy. A taxonomy can have multiple entry points and the resulting set of taxonomies of using an entry point is called a DTS. For example http://xbrl.fasb.org/us-gaap/2019/entire/us-gaap-entryPoint-all-2019-01-31.xsd
    dts.hash_Param:
       in: query
       name: dts.hash
       schema:
          type: string
       description: The DTS identifier for a given group of taxonomies as a hex hash. XBRL facts and linkbases are typically associated with a given report that is asscociated with a DTS.
    dts.id_Param:
        in: query
        name: dts.id
        style: form
        explode: false
        schema:
          type: array
          items:
            type: integer
        description: A unique integer as a DTS identifier for a given group of taxonomies. XBRL facts and linkbases are typically associated with a given report that is asscociated with a DTS.
    dts.taxonomy_Param:
       in: query
       name: dts.taxonomy
       schema:
          type: string
       description: The taxonomy group that the taxonomy belongs to such as `US GAAP` or `IFRS`.
       example: US GAAP
    dts.taxonomy-name_Param:
       in: query
       name: dts.taxonomy-name
       schema:
          type: string
       description: The specific taxonomy name such as `US GAAP 2019` or `IFRS 2019`.
       example: US GAAP 2019
    dts.target-namespace_Param:
       in: query
       name: dts.target-namespace
       schema:
          type: string
       description: The target namespace of a discoverable taxonomy set (DTS).
    dts.version_Param:
       in: query
       name: dts.version
       schema:
          type: string
       description: The specific taxonomy version name, such as `2019` for US GAAP.
       example: 2019

    entity.cik_Param:
       in: query
       name: entity.cik
       style: form
       explode: false
       schema:
          type: array
          items:
             type: string
       description: The CIK is the SEC identifier used to identify a reporting entity. This is the CIK associated with a given fact, DTS or report.
    entity.id_Param:
       in: query
       name: entity.id
       style: form
       explode: false
       schema:
          type: array
          items:
             type: integer
       description: The internal identifier used to identify an entity. This will be replaced with the LEI when the SEC supports the LEI standard.
    entity.name_Param:
       in: query
       name: entity.name
       schema:
          type: string
       description: The name of the entity reporting. 
    entity.ticker_Param:
       in: query
       name: entity.ticker
       style: form
       explode: false
       schema:
          type: array
          items:
             type: string
       description: The stock exchange ticker of the entity filing the report. Although a company may have multiple tickers this returns a single value.

    fact.has-dimensions_Param:
       in: query
       name: fact.has-dimensions
       schema:
          type: boolean
       description: his boolean field indicates if the fact has any dimensions associated with it.
    fact.hash_Param:
       in: query
       name: fact.hash
       schema:
          type: string
       description: The fact hash is derived from the aspect properties of the fact. Each fact will have a different hash in a given report. Over time however, different facts may have the same hash if they are identical. The hash does not take into account the value reported for the fact. The fact hash is used to determine the ultimus index. By searching on the hash you can identify all identical facts that were reported.
    fact.id_Param:
       in: query
       name: fact.id
       style: form
       explode: false
       schema:
          type: array
          items:
             type: integer
       description: The internal identifier used to identify a fact.
    fact.is-extended_Param:
       in: query
       name: fact.is-extended
       schema:
          type: boolean
       description: This indicates if the fact is comprised of either an extension concept, extension axis or extension member.
    fact.text-search_Param:
       in: query
       name: fact.text-search
       schema:
          type: string
       description: | 
              Search for strings within fact.value data (ie. to locate a specific name, topic or reference within a text block). Fields returned include fact.example and fact.highlighted-value
              
              The XBRL API uses the Sphinx search engine to identify text. This powerful search engine quickly identifies a given text string. Sphinx is enabled to support stemming, which means it will also return plurals of a noun i.e. ipad will also return ipads. It will also return the present, future and past form of a verb for example the word kill will also return killed and killing. To match the word exactly the character "=" can be placed in front of the word i.e. = ipad will return the occurrence of the word ipad only.
              
              The Sphinx search characters that can be used are summarized in the table below:

              | Operator Name | Symbol | Example |
              | ------- | ------- | ------- | 
              | OR operator  | &#124; | Tsunami &#124; Earthquake will return text that contain either Earthquake or Tsunami. |
              | AND Operator	| & |	Tsunami & Earthquake will return text that contains both Tsunami and Earthquake. If you leave a space between 2 words it is assumed to represent an &. i.e. Tsunami Japan |
              | NOT Operator	| ! | To exclude words from a text search use the operator !. For example Tsunami & Japan &! Earthquake will return strings that contain Tsunami and Japan but not earthquake. |
              | Exact Match Operator | "text here" | Use quotes to match an exact sentence for example "the ultimate effect that the Tsunami" will return the exact sentence match. |
              | Parenthesis	| () |	Use Parenthesis to group search logic. (Assets & Liabilities) &! retirement will return text that contain both Assets and Liabilities but excluding retirement. |
              | Equal (no stemming)	| = |	Use = in front of a word to stop stemming. i.e. kill will return kill, killed, kills and killing. =kill will return kill. |
              | Word Proximity	| NEAR/n |	Use the key word NEAR with an integer to identify closeness of words. i.e. Tsunami NEAR/3 Japan will return those occurrences where Tsunami and Japan are within three words of each other. i.e. "Tsunami in Japan", "Japan earthquake and tsunami" but not "Japan earthquake and large tsunami" |
              | Sentence Restriction	| SENTENCE	| Use the key word SENTENCE to identify where words are in the same sentence. i.e. Japan SENTENCE tsunami to return where these 2 words are in the same sentence. |
              | Paragraph Restriction	| PARAGRAPH	| Use the key word PARAGRAPH to identify where words are in the same paragraph. i.e. Japan PARAGRAPH tsunami to return where these 2 words are in the same paragraph. |         
              | Quorum matching	| "text here"/n	| Use an integer after a text string to match the number of words defined after the forward slash. i.e. "Japan earthquake tsunami"/2 will return those strings where any 2 of the 3 words listed occurr i.e. Japan and Earthquake, Japan and Tsunami, earthquake and Tsunami. |             
              | Order	| << |	To return those strings only where words appear in a certain 2 less than signs are used. For example Japan << earthquake << tsunami will return a string where all three words appear in this order. such as "occurred in Japan. The earthquake was followed by a tsunami which" |             
              | Proximity Search	| "text here"~n	| Use ~n after a text string to identify where the search words all appear in a sequence of n words. For example "Japan earthquake tsunami"~10 will return those strings where the 3 words appear within a sequence of 10 words i.e. Japan Tsunami and Earthquake, Japan's earthquake shook the town and was destroyed by Tsunami, would both be returned as all 3 words appear in a sequence of less than 10 words. |

    fact.ultimus_Param:
       in: query
       name: fact.ultimus
       schema:
          type: boolean
       description: A boolean that indicates if the fact is the latest value reported.  A value of true represents the latest value reported.  A value of false represents that the value has been superceded with a more recent fact. If requesting values from a specific report, the ultimus should not be used as a search parameter, as all the fact values will not be returned if a subsequent report has been filed in which the fact appears.
    fact.ultimus-index_Param:
       in: query
       name: fact.ultimus-index
       style: form
       explode: false
       schema:
         type: array
         items:
          type:  integer
       description: An integer that records the incarnation of the fact. The same fact may be reported many times and the ultimus field represents the reverse order of incarnation for the fact's reporting. A value of 1 indicates that this is the latest value of the fact. A value of 6 for example would indicate that the value has been reported 6 times subsquent to the fact's most-recent reporting. If requesting values from a specific report, the ultimus index should not be used as a search parameter, as all the fact values will not be returned if a subsequent report has been filed in which the fact appears.
    fact.value_Param:
       in: query
       name: fact.value
       schema:
          type: string
       description: The value of the fact as a text value. This includes numerical as well as non-numerical values reported.
    fact.value-link_Param:
       in: query
       name: fact.value-link
       schema:
          type: string
       description: A URL to the rendered fact.value data. For data encoded as HTML (ie. text block disclosures), the URL will display the formatted data excerpted from the full report.

    label.text_Param:
        in: query
        name: label.text
        schema:
          type: string
        description: Portion of the label text to be searched on.
    label.role_Param:
        in: query
        name: label.role
        schema:
          type: string
        description: The label role to be searched on, usually used in conjunction with label.text.

    member.is-base_Param:
       in: query
       name: member.is-base
       schema:
          type: boolean
       description: A boolean value that indicates if the member is a base element in the reporting taxonomy or a company extension.  
    member.local-name_Param:
       in: query
       name: member.local-name
       style: form
       explode: false
       schema:
          type: array
          items:
             type: string
       description: Local name of the member.
    member.typed-value_Param:
       in: query
       name: member.typed-value
       style: form
       explode: false
       schema:
          type: array
          items:
             type: string
       description: Typed member value.
    member.member-value_Param:
       in: query
       name: member.member-value
       style: form
       explode: false
       schema:
          type: array
          items:
             type: string
       description: Typed member or explicit member value.
    member.namespace_Param:
       in: query
       name: member.namespace
       schema:
          type: string
       description: Namespace of the member.

    network.arcrole-uri_Param:
      in: query
      name: network.arcrole-uri
      schema:
          type: string
          format: uri
      description: URI that identifies the link types, such as parent-child. However, this is the full URI of http://www.xbrl.org/2003/arcrole/parent-child.
      example: http://www.xbrl.org/2003/arcrole/parent-child
    network.id_Param:
      in: query
      name: network.id
      schema:
          type: integer
      description: Unique internal identifier used to identify a specific network. A different identifier is used for networks with the same role but different linkbase types.
    network.link-name_Param:
      in: query
      name: network.link-name
      schema:
          type: string
      description: Name that identifies the link type. This corresponds to a linkbase i.e. presentationLink, calculationLink, definitionLink.
    network.role-description_Param:
      in: query
      name: network.role-description
      schema:
        type: string
      description: Readable name or description of the header.
      example: 40201 - Disclosure - Balance Sheet Components (Details)
    network.role-uri_Param:
      in: query
      name: network.role-uri
      schema:
          type: string
          format: uri
      description: The URI of the network role. This would appear as a URI describing the reporting group i.e. http://www.bc.com/role/DisclosureBalanceSheetComponentsDetails.
      example: http://www.bc.com/role/DisclosureBalanceSheetComponentsDetails 
 
    period.calendar-period_Param:
       in: query
       name: period.calendar-period
       style: form
       explode: false
       allowEmptyValue : false
       schema:
          type: array
          items:
             type: string
             enum: [Y,1Q,2Q,3Q,4Q,3QCUM,1H,2H]
       description: The period identifier for the fact such as year(Y) quarters such as (Q1,Q2,Q3,Q4), cumulative quarters such as 3QCUM, and half years such as H1 and H2. The calendar period aligns the periods with a calendar year. A company with a year end of 30 September would have a fiscal 4th quarter which would be a calendar quarter of Q3.
    period.fiscal-id_Param:
       in: query
       name: period.fiscal-id
       schema:
          type: string
       description: The identifier of the fiscal period. Each period has an assigned hash which identifies the fiscal period. The hash can be used to search for periods that are identical. Periods with the same period and year in fact may be different as the fiscal periods and years are approximations. The logic applied in the API is that if a fact is more than 15 days into a year beginning January 1, the fact is in the same fiscal year as the year beginning January 1. 
    period.fiscal-period_Param:
       in: query
       name: period.fiscal-period
       style: form
       explode: false
       allowEmptyValue : false
       schema:
          type: array
          uniqueItems: true
          items:
             type: string
             enum: [Y,1Q,2Q,3Q,4Q,3QCUM,1H,2H]
       description: The period identifier for the fact such as year(Y) quarters such as (Q1,Q2,Q3,Q4), cumulative quarters such as 3QCUM, and half years such as H1 and H2. The fiscal period aligns the periods with a fiscal year. A company with a year end of 30 September would have a fiscal 4th quarter which would be a fiscal quarter of Q4 and a calander quarter of Q3.
    period.fiscal-year_Param:
       in: query
       name: period.fiscal-year
       style: form
       explode: false
       allowEmptyValue : false
       schema:
          type: array
          uniqueItems: true
          items:
             type: integer
       description: The fiscal year in which the fact is applicable in the format 'YYYY'.
    period.id_Param:
       in: query
       name: period.id
       schema:
          type: string
       description: The identifier of the calander period. Each period has an assigned hash which identifies the period. The hash can be used to search for periods that are identical. Periods with the same period and year in fact may be different as the fiscal period is an approximation. 
    period.year_Param:
       in: query
       name: period.year
       style: form
       explode: false
       allowEmptyValue : false
       schema:
          type: array
          uniqueItems: true
          items:
             type: integer
       description: The calendar year in which the fact is applicable in the format 'YYYY'.

    relationship.id_Param:
      in: query
      name: relationship.id
      schema:
          type: integer
      description: An internal identifier associated with the relationship.  
    relationship.order_Param:
      in: query
      name: relationship.order
      schema:
          type: number
      description: The order of the relationships relative to each other. 
    relationship.preferred-label_Param:
      in: query
      name: relationship.preferred-label
      schema:
          type: string
          format: uri
      description: The preferred label attribute value associated with a relationship.
    relationship.source-concept-id_Param:
      in: query
      name: relationship.source-concept-id
      schema:
          type: integer
      description: The unique identifier for the concept that is the basis of the relationship.
    relationship.source-name_Param:
      in: query
      name: relationship.source-name
      schema:
          type: string
      description: The name of the concept that is the basis of the relationship. 
    relationship.source-namespace_Param:
      in: query
      name: relationship.source-namespace
      schema:
          type: string
          format: uri      
      description: The namespace of the concept that is the basis of the relationship. 
    relationship.target-concept-id_Param:
      in: query
      name: relationship.target-concept-id
      schema:
          type: integer
      description: The unique identifier for the concept under the source relationship.
    relationship.target-is-abstract_Param:
      in: query
      name: relationship.target-is-abstract
      schema:
          type: boolean
      description: The abstract indicator (boolean) of the concept under the source relationship.
    relationship.target-name_Param:
      in: query
      name: relationship.target-name
      schema:
          type: string
      description: The name of the concept under the source relationship.  
    relationship.target-namespace_Param:
      in: query
      name: relationship.target-namespace
      schema:
          type: string
          format: uri
      description: The namespace of the concept under the source relationship.  
    relationship.tree-depth_Param:
      in: query
      name: relationship.tree-depth
      schema:
          type: integer
      description: When viewed as a tree, the value represents the number of positions from the root node of the relationship. 
    relationship.tree-sequence_Param:
      in: query
      name: relationship.tree-sequence
      schema:
          type: integer
      description: The order in which the relationship appears in the entire network.  

    report.document-type_Param:
       in: query
       name: report.document-type
       style: form
       explode: false
       allowEmptyValue : false
       schema:
          type: array
          uniqueItems: true
          items:
             type: string
       description: The document type of the report e.g. 10-K, 10-Q, etc.   
    report.accession_Param:
       in: query
       name: report.accession
       schema:
          type: string
       description: The unique identifier (inclusive of the entity CIK) used by the SEC for a report. No comma seperated values are allowed.
    report.creation-software_Param:
       in: query
       name: report.creation-software
       schema:
          type: string
       description: The creation software that was used to create a report.
    report.entity-name_Param:
       in: query
       name: report.entity-name
       schema:
          type: string
       description: The name of the entity submitting the report. Enter the full entity name, or a portion of the entity name.
    report.entry-type_Param:
       in: query
       name: report.entry-type
       schema:
          type: string
          enum: [instance,inline]
       description: The entry type of the report. This could be instance, inline, JSON, etc.
    report.entry-url_Param:
       in: query
       name: report.entry-url
       schema:
          type: string
       description: The URL entry point of a discoverable taxonomy set. This is also referred to as the entry point for a taxonomy. This represents the DTS entry point for a specific report.
    report.filer-category_Param:
      in: query
      name: report.filer-category
      schema:
          type: string
          enum: [Large Accelerated Filer,Accelerated Filer,Non-accelerated Filer]
      description: > 
              Filer category of the report. Can be one of the following:  
                - Large Accelerated Filer  
                - Accelerated Filer  
                - Non-accelerated Filer  
    report.filing-year_Param:
      in: query  
      name: report.filing-year
      schema:
          type: integer 
      description: >
          Year in which the filing was made.
    report.id_Param:
       in: query
       name: report.id
       style: form
       explode: false
       allowEmptyValue : false
       schema:
          type: array
          uniqueItems: true
          items:
             type: integer
       description: The internal identifier assigned to a report.   
    report.is-most-current_Param:
       in: query
       name: report.is-most-current
       schema:
          type: boolean
       description: A boolean indicator for whether the report is the most current (true).
    report.period-index_Param:
      in: query
      name: report.period-index
      style: form
      explode: false
      schema:
          type: array
          items:
            type: integer
      description: Allows the retrieval of reports other than most current. A value of 1 gets the latest report. A value of 2 gets the second to last report etc.
    report.restated_Param:
       in: query
       name: report.restated
       schema:
          type: boolean
       description: A boolean that indicates if the report has been subsequently restated.  A value of true represents that the report has been subsequently restated by another report.  A value of false means that this report has not been subsequently restated by another report.
    report.restated-index_Param:
       in: query
       name: report.restated-index
       style: form
       explode: false
       schema:
         type: array
         items:
            type:  integer
       description: A numerical indicator that can be used to identify if a report has been restated. If the value is 1 it indicates that this is the latest report. If the value is 2 it means that an updated copy of the report has been filed.
    report.sec-url_Param:
       in: query
       name: report.sec-url
       schema:
          type: string
       description: The URL at which the details of a filing can be accessed from the SEC EDGAR system.
    report.sic-code_Param:
       in: query
       name: report.sic-code
       style: form
       explode: false
       schema:
            type: array
            items:
              type: string
       description: Integer that representsthe Standard Industrial Classification (SIC) code used by the SEC in the United States.
    report.source-id_Param:
       in: query
       name: report.source-id
       schema:
          type: integer
       description: ID of the filing program.
    report.source-name_Param:
       in: query
       name: report.source-name
       schema:
          type: string
       description: Name of the source of the data such as SEC.

    stringmatch_Param:
       in: query
       name: stringmatch
       schema:
          type: string
       description: |
          Enables simple text search functionality with the network.role-description parameter on the relationship object.

          Use the **like** switch to find a specific text string, for example

          ```stringmatch=network.role-description(like)&network.role-description=statement income&network.link-name=presentationLink```

          to find the exact phrase 'statement income' in the presentation linkbase.

          Use the **ts** switch to find multiple text strings, for example

          ```stringmatch=network.role-description(ts)&network.role-description=statement income&network.link-name=presentationLink``` 
          
          to find each word 'statement' and 'income' in the presentation linkbase.
    unit_Param:
       in: query
       name: unit
       style: form
       explode: false
       schema:
          type: array
          uniqueItems: true
          items:
             type: string
       description: The unit of measure associated with the fact, such as USD.
  responses:
    invalid_request:
      description: __each user account__ has a specific limit associated with it (ie. [100, 500 or 2,000](https://xbrl.us/access-token)) 
      content:
        applications/json:
          schema:
            $ref: '#/components/schemas/error_message'
          example:
            status: Invalid Limit Amount
            body: The account is attempting to retrieve records beyond its established limit. 
    bad_request:
      description: >
        Malformed request or missing fields. Check that Content-Type matches the format/encoding, and that all required fields are spelled correctly, have correct types, and valid values. Possible status messages include:
         * Invalid Parameter
         * FieldsNotFound
         * Fields With Invalid Value
         * Invalid Limit Parameter
         * Invalid Sort Parameter
      content:
        applications/json:
          schema:
            $ref: '#/components/schemas/error_message'
          example:
            error: bad_request
            error_description: Missing a field 'xxx'
    bad_token:
      description: The token is invalid, expired, or corrupted.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/error_message'
          example:
            error: unauthorized
            error_description: Cannot convert access token to JSON
    unauthorized:
      description: >
        Bad credentials, or could not read credentials due to malformed JSON.
         * "Full authentication is required..." -> malformed JSON
         * "Bad client credentials" -> client_id/client_secret pair invalid
         * "Bad credentials" -> username/password pair invalid
      content:
        applications/json:
          schema:
            $ref: '#/components/schemas/error_message'
          example:
            error: unauthorized
            error_description: Full authentication is required to access this resource
    not_found:
      description: This resource doesn't exist or you don't have the permissions to view it.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/error_message'
          example: 
            error: not_found
            error_description: An entity with that name could not be found.
    method_not_allowed:
      description: Method not allowed
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/error_message'
          example: 
            error: method_not_allowed
            error_description: Request method 'DELETE' not supported
    internal_server_error:
      description: Internal error, not the fault of the client.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/error_message'
          example: 
            error: internal_error
            error_description: Unknown error, try again later